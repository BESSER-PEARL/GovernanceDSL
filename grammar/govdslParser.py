# Generated from govdsl.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,97,810,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,4,0,180,8,0,11,0,12,0,181,1,
        0,1,0,1,1,1,1,3,1,188,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,197,8,
        2,1,2,3,2,200,8,2,1,2,3,2,203,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,
        3,212,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,223,8,4,1,4,3,
        4,226,8,4,1,4,3,4,229,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,237,8,5,1,
        5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,4,7,249,8,7,11,7,12,7,250,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,4,9,260,8,9,11,9,12,9,261,1,10,1,10,
        1,10,1,10,1,10,1,10,3,10,270,8,10,1,10,1,10,1,10,1,10,4,10,276,8,
        10,11,10,12,10,277,1,10,1,10,3,10,282,8,10,1,11,1,11,1,12,1,12,1,
        13,1,13,1,13,4,13,291,8,13,11,13,12,13,292,1,14,1,14,1,14,1,14,1,
        14,4,14,300,8,14,11,14,12,14,301,1,14,1,14,3,14,306,8,14,1,15,1,
        15,1,15,4,15,311,8,15,11,15,12,15,312,1,16,1,16,3,16,317,8,16,1,
        16,1,16,3,16,321,8,16,1,17,1,17,1,17,1,17,1,17,3,17,328,8,17,1,18,
        1,18,1,18,1,18,1,18,3,18,335,8,18,1,19,1,19,1,20,1,20,1,20,3,20,
        342,8,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
        1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,5,29,372,8,29,10,29,12,29,375,9,29,1,30,1,30,
        1,30,1,30,1,30,3,30,382,8,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        5,32,391,8,32,10,32,12,32,394,9,32,1,33,1,33,1,33,1,33,1,33,5,33,
        401,8,33,10,33,12,33,404,9,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,4,35,415,8,35,11,35,12,35,416,1,36,1,36,1,36,1,36,1,36,
        5,36,424,8,36,10,36,12,36,427,9,36,1,37,1,37,1,37,3,37,432,8,37,
        1,37,3,37,435,8,37,1,38,1,38,1,38,1,38,3,38,441,8,38,1,38,5,38,444,
        8,38,10,38,12,38,447,9,38,1,39,1,39,3,39,451,8,39,1,40,1,40,1,40,
        3,40,456,8,40,1,40,3,40,459,8,40,1,40,3,40,462,8,40,1,40,3,40,465,
        8,40,1,40,3,40,468,8,40,1,40,3,40,471,8,40,1,41,1,41,1,41,1,41,1,
        42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,489,
        8,44,1,44,3,44,492,8,44,1,44,3,44,495,8,44,1,44,3,44,498,8,44,1,
        44,3,44,501,8,44,1,44,3,44,504,8,44,1,44,3,44,507,8,44,1,44,3,44,
        510,8,44,1,44,3,44,513,8,44,1,44,3,44,516,8,44,1,45,1,45,1,45,1,
        45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,
        48,534,8,48,1,48,5,48,537,8,48,10,48,12,48,540,9,48,1,49,1,49,1,
        49,1,49,3,49,546,8,49,1,49,5,49,549,8,49,10,49,12,49,552,9,49,1,
        49,1,49,1,50,1,50,1,50,3,50,559,8,50,1,51,1,51,1,51,1,51,1,52,1,
        52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,5,54,578,
        8,54,10,54,12,54,581,9,54,1,55,1,55,3,55,585,8,55,1,56,1,56,1,56,
        1,57,1,57,1,57,3,57,593,8,57,1,57,3,57,596,8,57,1,57,3,57,599,8,
        57,1,57,3,57,602,8,57,1,57,3,57,605,8,57,1,57,3,57,608,8,57,1,57,
        3,57,611,8,57,1,57,3,57,614,8,57,1,57,5,57,617,8,57,10,57,12,57,
        620,9,57,1,58,1,58,3,58,624,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
        58,3,58,633,8,58,1,59,1,59,3,59,637,8,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,646,8,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,5,64,666,8,64,
        10,64,12,64,669,9,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,
        5,66,680,8,66,10,66,12,66,683,9,66,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,5,67,693,8,67,10,67,12,67,696,9,67,1,67,3,67,699,8,67,
        1,67,1,67,1,67,1,67,3,67,705,8,67,1,67,1,67,1,68,1,68,3,68,711,8,
        68,1,68,1,68,1,68,1,69,1,69,3,69,718,8,69,1,69,1,69,1,69,1,69,1,
        69,1,70,1,70,1,71,1,71,1,72,1,72,3,72,731,8,72,1,72,3,72,734,8,72,
        1,72,1,72,1,72,1,72,5,72,740,8,72,10,72,12,72,743,9,72,1,73,1,73,
        1,74,1,74,1,74,1,74,1,74,3,74,752,8,74,1,75,1,75,1,76,1,76,1,76,
        1,76,1,77,1,77,1,77,1,77,3,77,764,8,77,1,78,1,78,1,78,1,78,3,78,
        770,8,78,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,779,8,80,1,81,1,
        81,1,81,1,81,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,
        85,1,85,1,86,1,86,1,86,4,86,800,8,86,11,86,12,86,801,1,86,1,86,1,
        87,1,87,3,87,808,8,87,1,87,0,0,88,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,0,12,1,0,4,9,1,0,16,17,1,0,20,22,1,0,24,25,1,0,27,29,1,0,
        30,32,1,0,59,62,1,0,73,74,1,0,75,77,1,0,79,80,1,0,87,88,1,0,91,92,
        819,0,176,1,0,0,0,2,187,1,0,0,0,4,189,1,0,0,0,6,206,1,0,0,0,8,216,
        1,0,0,0,10,232,1,0,0,0,12,241,1,0,0,0,14,243,1,0,0,0,16,252,1,0,
        0,0,18,256,1,0,0,0,20,263,1,0,0,0,22,283,1,0,0,0,24,285,1,0,0,0,
        26,287,1,0,0,0,28,294,1,0,0,0,30,307,1,0,0,0,32,314,1,0,0,0,34,322,
        1,0,0,0,36,329,1,0,0,0,38,336,1,0,0,0,40,341,1,0,0,0,42,343,1,0,
        0,0,44,346,1,0,0,0,46,348,1,0,0,0,48,352,1,0,0,0,50,354,1,0,0,0,
        52,358,1,0,0,0,54,360,1,0,0,0,56,364,1,0,0,0,58,366,1,0,0,0,60,376,
        1,0,0,0,62,383,1,0,0,0,64,385,1,0,0,0,66,395,1,0,0,0,68,405,1,0,
        0,0,70,409,1,0,0,0,72,418,1,0,0,0,74,428,1,0,0,0,76,436,1,0,0,0,
        78,450,1,0,0,0,80,452,1,0,0,0,82,472,1,0,0,0,84,476,1,0,0,0,86,480,
        1,0,0,0,88,484,1,0,0,0,90,517,1,0,0,0,92,521,1,0,0,0,94,525,1,0,
        0,0,96,529,1,0,0,0,98,541,1,0,0,0,100,558,1,0,0,0,102,560,1,0,0,
        0,104,564,1,0,0,0,106,568,1,0,0,0,108,572,1,0,0,0,110,582,1,0,0,
        0,112,586,1,0,0,0,114,589,1,0,0,0,116,621,1,0,0,0,118,634,1,0,0,
        0,120,647,1,0,0,0,122,650,1,0,0,0,124,652,1,0,0,0,126,654,1,0,0,
        0,128,660,1,0,0,0,130,670,1,0,0,0,132,674,1,0,0,0,134,684,1,0,0,
        0,136,708,1,0,0,0,138,715,1,0,0,0,140,724,1,0,0,0,142,726,1,0,0,
        0,144,728,1,0,0,0,146,744,1,0,0,0,148,746,1,0,0,0,150,753,1,0,0,
        0,152,755,1,0,0,0,154,759,1,0,0,0,156,765,1,0,0,0,158,771,1,0,0,
        0,160,773,1,0,0,0,162,780,1,0,0,0,164,784,1,0,0,0,166,786,1,0,0,
        0,168,790,1,0,0,0,170,794,1,0,0,0,172,796,1,0,0,0,174,807,1,0,0,
        0,176,177,3,14,7,0,177,179,3,70,35,0,178,180,3,2,1,0,179,178,1,0,
        0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,0,
        0,0,183,184,5,0,0,1,184,1,1,0,0,0,185,188,3,4,2,0,186,188,3,6,3,
        0,187,185,1,0,0,0,187,186,1,0,0,0,188,3,1,0,0,0,189,190,3,12,6,0,
        190,191,5,94,0,0,191,192,5,1,0,0,192,193,3,16,8,0,193,194,3,60,30,
        0,194,196,3,108,54,0,195,197,3,68,34,0,196,195,1,0,0,0,196,197,1,
        0,0,0,197,199,1,0,0,0,198,200,3,114,57,0,199,198,1,0,0,0,199,200,
        1,0,0,0,200,202,1,0,0,0,201,203,3,148,74,0,202,201,1,0,0,0,202,203,
        1,0,0,0,203,204,1,0,0,0,204,205,5,2,0,0,205,5,1,0,0,0,206,207,5,
        3,0,0,207,208,5,94,0,0,208,209,5,1,0,0,209,211,3,16,8,0,210,212,
        3,160,80,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,
        3,172,86,0,214,215,5,2,0,0,215,7,1,0,0,0,216,217,3,12,6,0,217,218,
        5,94,0,0,218,219,5,1,0,0,219,220,3,60,30,0,220,222,3,108,54,0,221,
        223,3,68,34,0,222,221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,
        226,3,114,57,0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,
        229,3,148,74,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,
        231,5,2,0,0,231,9,1,0,0,0,232,233,5,3,0,0,233,234,5,94,0,0,234,236,
        5,1,0,0,235,237,3,160,80,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,
        1,0,0,0,238,239,3,172,86,0,239,240,5,2,0,0,240,11,1,0,0,0,241,242,
        7,0,0,0,242,13,1,0,0,0,243,244,5,10,0,0,244,248,5,11,0,0,245,249,
        3,18,9,0,246,249,3,26,13,0,247,249,3,30,15,0,248,245,1,0,0,0,248,
        246,1,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,
        251,1,0,0,0,251,15,1,0,0,0,252,253,5,12,0,0,253,254,5,11,0,0,254,
        255,5,94,0,0,255,17,1,0,0,0,256,257,5,13,0,0,257,259,5,11,0,0,258,
        260,3,20,10,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,
        262,1,0,0,0,262,19,1,0,0,0,263,269,5,94,0,0,264,265,5,14,0,0,265,
        266,3,22,11,0,266,267,5,11,0,0,267,268,3,24,12,0,268,270,1,0,0,0,
        269,264,1,0,0,0,269,270,1,0,0,0,270,281,1,0,0,0,271,272,5,1,0,0,
        272,273,5,15,0,0,273,275,5,11,0,0,274,276,3,28,14,0,275,274,1,0,
        0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,
        0,0,279,280,5,2,0,0,280,282,1,0,0,0,281,271,1,0,0,0,281,282,1,0,
        0,0,282,21,1,0,0,0,283,284,7,1,0,0,284,23,1,0,0,0,285,286,5,94,0,
        0,286,25,1,0,0,0,287,288,5,15,0,0,288,290,5,11,0,0,289,291,3,28,
        14,0,290,289,1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,
        0,0,293,27,1,0,0,0,294,305,5,94,0,0,295,296,5,1,0,0,296,297,5,18,
        0,0,297,299,5,11,0,0,298,300,3,32,16,0,299,298,1,0,0,0,300,301,1,
        0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,5,
        2,0,0,304,306,1,0,0,0,305,295,1,0,0,0,305,306,1,0,0,0,306,29,1,0,
        0,0,307,308,5,18,0,0,308,310,5,11,0,0,309,311,3,32,16,0,310,309,
        1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,31,1,
        0,0,0,314,316,5,94,0,0,315,317,5,11,0,0,316,315,1,0,0,0,316,317,
        1,0,0,0,317,320,1,0,0,0,318,321,3,34,17,0,319,321,3,36,18,0,320,
        318,1,0,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,33,1,0,0,0,322,327,
        3,38,19,0,323,324,5,1,0,0,324,325,3,40,20,0,325,326,5,2,0,0,326,
        328,1,0,0,0,327,323,1,0,0,0,327,328,1,0,0,0,328,35,1,0,0,0,329,334,
        5,19,0,0,330,331,5,1,0,0,331,332,3,44,22,0,332,333,5,2,0,0,333,335,
        1,0,0,0,334,330,1,0,0,0,334,335,1,0,0,0,335,37,1,0,0,0,336,337,7,
        2,0,0,337,39,1,0,0,0,338,342,3,50,25,0,339,342,3,54,27,0,340,342,
        3,42,21,0,341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,41,
        1,0,0,0,343,344,3,54,27,0,344,345,3,58,29,0,345,43,1,0,0,0,346,347,
        3,46,23,0,347,45,1,0,0,0,348,349,5,23,0,0,349,350,5,11,0,0,350,351,
        3,48,24,0,351,47,1,0,0,0,352,353,7,3,0,0,353,49,1,0,0,0,354,355,
        5,26,0,0,355,356,5,11,0,0,356,357,3,52,26,0,357,51,1,0,0,0,358,359,
        7,4,0,0,359,53,1,0,0,0,360,361,5,23,0,0,361,362,5,11,0,0,362,363,
        3,56,28,0,363,55,1,0,0,0,364,365,7,5,0,0,365,57,1,0,0,0,366,367,
        5,33,0,0,367,368,5,11,0,0,368,373,5,94,0,0,369,370,5,34,0,0,370,
        372,5,94,0,0,371,369,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,
        374,1,0,0,0,374,59,1,0,0,0,375,373,1,0,0,0,376,377,5,35,0,0,377,
        381,5,36,0,0,378,382,3,62,31,0,379,382,3,64,32,0,380,382,3,66,33,
        0,381,378,1,0,0,0,381,379,1,0,0,0,381,380,1,0,0,0,382,61,1,0,0,0,
        383,384,5,37,0,0,384,63,1,0,0,0,385,386,5,38,0,0,386,387,5,11,0,
        0,387,392,5,94,0,0,388,389,5,34,0,0,389,391,5,94,0,0,390,388,1,0,
        0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,65,1,0,0,
        0,394,392,1,0,0,0,395,396,5,39,0,0,396,397,5,11,0,0,397,402,5,94,
        0,0,398,399,5,34,0,0,399,401,5,94,0,0,400,398,1,0,0,0,401,404,1,
        0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,67,1,0,0,0,404,402,1,0,
        0,0,405,406,5,40,0,0,406,407,5,11,0,0,407,408,5,94,0,0,408,69,1,
        0,0,0,409,410,5,41,0,0,410,414,5,11,0,0,411,415,3,72,36,0,412,415,
        3,76,38,0,413,415,3,96,48,0,414,411,1,0,0,0,414,412,1,0,0,0,414,
        413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,
        71,1,0,0,0,418,419,5,42,0,0,419,420,5,11,0,0,420,425,3,74,37,0,421,
        422,5,34,0,0,422,424,3,74,37,0,423,421,1,0,0,0,424,427,1,0,0,0,425,
        423,1,0,0,0,425,426,1,0,0,0,426,73,1,0,0,0,427,425,1,0,0,0,428,434,
        5,94,0,0,429,431,5,1,0,0,430,432,3,82,41,0,431,430,1,0,0,0,431,432,
        1,0,0,0,432,433,1,0,0,0,433,435,5,2,0,0,434,429,1,0,0,0,434,435,
        1,0,0,0,435,75,1,0,0,0,436,437,5,43,0,0,437,438,5,11,0,0,438,445,
        3,78,39,0,439,441,5,34,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,
        1,0,0,0,442,444,3,78,39,0,443,440,1,0,0,0,444,447,1,0,0,0,445,443,
        1,0,0,0,445,446,1,0,0,0,446,77,1,0,0,0,447,445,1,0,0,0,448,451,3,
        80,40,0,449,451,3,88,44,0,450,448,1,0,0,0,450,449,1,0,0,0,451,79,
        1,0,0,0,452,470,5,94,0,0,453,455,5,1,0,0,454,456,3,82,41,0,455,454,
        1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,5,34,0,0,458,457,
        1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,462,3,84,42,0,461,460,
        1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,465,5,34,0,0,464,463,
        1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,468,3,86,43,0,467,466,
        1,0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,471,5,2,0,0,470,453,
        1,0,0,0,470,471,1,0,0,0,471,81,1,0,0,0,472,473,5,44,0,0,473,474,
        5,11,0,0,474,475,5,96,0,0,475,83,1,0,0,0,476,477,5,45,0,0,477,478,
        5,11,0,0,478,479,5,94,0,0,479,85,1,0,0,0,480,481,5,46,0,0,481,482,
        5,11,0,0,482,483,5,94,0,0,483,87,1,0,0,0,484,485,5,47,0,0,485,515,
        5,94,0,0,486,488,5,1,0,0,487,489,3,82,41,0,488,487,1,0,0,0,488,489,
        1,0,0,0,489,491,1,0,0,0,490,492,5,34,0,0,491,490,1,0,0,0,491,492,
        1,0,0,0,492,494,1,0,0,0,493,495,3,90,45,0,494,493,1,0,0,0,494,495,
        1,0,0,0,495,497,1,0,0,0,496,498,5,34,0,0,497,496,1,0,0,0,497,498,
        1,0,0,0,498,500,1,0,0,0,499,501,3,92,46,0,500,499,1,0,0,0,500,501,
        1,0,0,0,501,503,1,0,0,0,502,504,5,34,0,0,503,502,1,0,0,0,503,504,
        1,0,0,0,504,506,1,0,0,0,505,507,3,94,47,0,506,505,1,0,0,0,506,507,
        1,0,0,0,507,509,1,0,0,0,508,510,5,34,0,0,509,508,1,0,0,0,509,510,
        1,0,0,0,510,512,1,0,0,0,511,513,3,86,43,0,512,511,1,0,0,0,512,513,
        1,0,0,0,513,514,1,0,0,0,514,516,5,2,0,0,515,486,1,0,0,0,515,516,
        1,0,0,0,516,89,1,0,0,0,517,518,5,48,0,0,518,519,5,11,0,0,519,520,
        5,96,0,0,520,91,1,0,0,0,521,522,5,49,0,0,522,523,5,11,0,0,523,524,
        5,96,0,0,524,93,1,0,0,0,525,526,5,50,0,0,526,527,5,11,0,0,527,528,
        5,96,0,0,528,95,1,0,0,0,529,530,5,51,0,0,530,531,5,11,0,0,531,538,
        3,98,49,0,532,534,5,34,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,535,
        1,0,0,0,535,537,3,98,49,0,536,533,1,0,0,0,537,540,1,0,0,0,538,536,
        1,0,0,0,538,539,1,0,0,0,539,97,1,0,0,0,540,538,1,0,0,0,541,542,5,
        94,0,0,542,543,5,1,0,0,543,550,3,100,50,0,544,546,5,34,0,0,545,544,
        1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,549,3,100,50,0,548,545,
        1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,
        1,0,0,0,552,550,1,0,0,0,553,554,5,2,0,0,554,99,1,0,0,0,555,559,3,
        102,51,0,556,559,3,104,52,0,557,559,3,106,53,0,558,555,1,0,0,0,558,
        556,1,0,0,0,558,557,1,0,0,0,559,101,1,0,0,0,560,561,5,52,0,0,561,
        562,5,11,0,0,562,563,5,94,0,0,563,103,1,0,0,0,564,565,5,53,0,0,565,
        566,5,11,0,0,566,567,5,94,0,0,567,105,1,0,0,0,568,569,5,54,0,0,569,
        570,5,11,0,0,570,571,5,94,0,0,571,107,1,0,0,0,572,573,5,55,0,0,573,
        574,5,11,0,0,574,579,3,110,55,0,575,576,5,34,0,0,576,578,3,110,55,
        0,577,575,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,
        0,580,109,1,0,0,0,581,579,1,0,0,0,582,584,5,94,0,0,583,585,3,112,
        56,0,584,583,1,0,0,0,584,585,1,0,0,0,585,111,1,0,0,0,586,587,5,36,
        0,0,587,588,5,94,0,0,588,113,1,0,0,0,589,590,5,56,0,0,590,592,5,
        11,0,0,591,593,3,116,58,0,592,591,1,0,0,0,592,593,1,0,0,0,593,595,
        1,0,0,0,594,596,3,118,59,0,595,594,1,0,0,0,595,596,1,0,0,0,596,598,
        1,0,0,0,597,599,3,128,64,0,598,597,1,0,0,0,598,599,1,0,0,0,599,601,
        1,0,0,0,600,602,3,130,65,0,601,600,1,0,0,0,601,602,1,0,0,0,602,604,
        1,0,0,0,603,605,3,132,66,0,604,603,1,0,0,0,604,605,1,0,0,0,605,607,
        1,0,0,0,606,608,3,134,67,0,607,606,1,0,0,0,607,608,1,0,0,0,608,610,
        1,0,0,0,609,611,3,136,68,0,610,609,1,0,0,0,610,611,1,0,0,0,611,613,
        1,0,0,0,612,614,3,138,69,0,613,612,1,0,0,0,613,614,1,0,0,0,614,618,
        1,0,0,0,615,617,3,144,72,0,616,615,1,0,0,0,617,620,1,0,0,0,618,616,
        1,0,0,0,618,619,1,0,0,0,619,115,1,0,0,0,620,618,1,0,0,0,621,623,
        5,57,0,0,622,624,3,122,61,0,623,622,1,0,0,0,623,624,1,0,0,0,624,
        625,1,0,0,0,625,632,5,11,0,0,626,633,3,120,60,0,627,633,3,126,63,
        0,628,629,3,120,60,0,629,630,5,34,0,0,630,631,3,126,63,0,631,633,
        1,0,0,0,632,626,1,0,0,0,632,627,1,0,0,0,632,628,1,0,0,0,633,117,
        1,0,0,0,634,636,5,58,0,0,635,637,5,94,0,0,636,635,1,0,0,0,636,637,
        1,0,0,0,637,638,1,0,0,0,638,645,5,11,0,0,639,646,3,120,60,0,640,
        646,3,126,63,0,641,642,3,120,60,0,642,643,5,34,0,0,643,644,3,126,
        63,0,644,646,1,0,0,0,645,639,1,0,0,0,645,640,1,0,0,0,645,641,1,0,
        0,0,646,119,1,0,0,0,647,648,5,95,0,0,648,649,3,124,62,0,649,121,
        1,0,0,0,650,651,5,94,0,0,651,123,1,0,0,0,652,653,7,6,0,0,653,125,
        1,0,0,0,654,655,5,95,0,0,655,656,5,63,0,0,656,657,5,95,0,0,657,658,
        5,63,0,0,658,659,5,95,0,0,659,127,1,0,0,0,660,661,5,64,0,0,661,662,
        5,11,0,0,662,667,5,94,0,0,663,664,5,34,0,0,664,666,5,94,0,0,665,
        663,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,
        129,1,0,0,0,669,667,1,0,0,0,670,671,5,65,0,0,671,672,5,11,0,0,672,
        673,5,95,0,0,673,131,1,0,0,0,674,675,5,66,0,0,675,676,5,11,0,0,676,
        681,5,94,0,0,677,678,5,34,0,0,678,680,5,94,0,0,679,677,1,0,0,0,680,
        683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,133,1,0,0,0,683,
        681,1,0,0,0,684,685,5,67,0,0,685,686,5,11,0,0,686,687,5,1,0,0,687,
        688,5,68,0,0,688,689,5,11,0,0,689,694,5,94,0,0,690,691,5,34,0,0,
        691,693,5,94,0,0,692,690,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,
        694,695,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,697,699,5,34,0,0,
        698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,69,0,0,
        701,704,5,11,0,0,702,705,3,174,87,0,703,705,3,158,79,0,704,702,1,
        0,0,0,704,703,1,0,0,0,705,706,1,0,0,0,706,707,5,2,0,0,707,135,1,
        0,0,0,708,710,5,70,0,0,709,711,3,142,71,0,710,709,1,0,0,0,710,711,
        1,0,0,0,711,712,1,0,0,0,712,713,5,11,0,0,713,714,3,170,85,0,714,
        137,1,0,0,0,715,717,5,71,0,0,716,718,3,142,71,0,717,716,1,0,0,0,
        717,718,1,0,0,0,718,719,1,0,0,0,719,720,5,72,0,0,720,721,3,140,70,
        0,721,722,5,11,0,0,722,723,3,120,60,0,723,139,1,0,0,0,724,725,7,
        7,0,0,725,141,1,0,0,0,726,727,7,8,0,0,727,143,1,0,0,0,728,730,5,
        78,0,0,729,731,3,142,71,0,730,729,1,0,0,0,730,731,1,0,0,0,731,733,
        1,0,0,0,732,734,3,146,73,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,
        1,0,0,0,735,736,5,11,0,0,736,741,5,94,0,0,737,738,5,34,0,0,738,740,
        5,94,0,0,739,737,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,
        1,0,0,0,742,145,1,0,0,0,743,741,1,0,0,0,744,745,7,9,0,0,745,147,
        1,0,0,0,746,747,5,81,0,0,747,751,5,11,0,0,748,752,3,150,75,0,749,
        752,3,154,77,0,750,752,3,156,78,0,751,748,1,0,0,0,751,749,1,0,0,
        0,751,750,1,0,0,0,752,149,1,0,0,0,753,754,3,152,76,0,754,151,1,0,
        0,0,755,756,5,82,0,0,756,757,5,11,0,0,757,758,5,96,0,0,758,153,1,
        0,0,0,759,760,5,83,0,0,760,763,5,11,0,0,761,764,3,174,87,0,762,764,
        3,158,79,0,763,761,1,0,0,0,763,762,1,0,0,0,764,155,1,0,0,0,765,766,
        5,84,0,0,766,769,5,11,0,0,767,770,3,174,87,0,768,770,3,158,79,0,
        769,767,1,0,0,0,769,768,1,0,0,0,770,157,1,0,0,0,771,772,5,94,0,0,
        772,159,1,0,0,0,773,774,5,85,0,0,774,775,5,11,0,0,775,776,3,162,
        81,0,776,778,3,166,83,0,777,779,3,168,84,0,778,777,1,0,0,0,778,779,
        1,0,0,0,779,161,1,0,0,0,780,781,5,86,0,0,781,782,5,11,0,0,782,783,
        3,164,82,0,783,163,1,0,0,0,784,785,7,10,0,0,785,165,1,0,0,0,786,
        787,5,89,0,0,787,788,5,11,0,0,788,789,3,170,85,0,789,167,1,0,0,0,
        790,791,5,90,0,0,791,792,5,11,0,0,792,793,3,170,85,0,793,169,1,0,
        0,0,794,795,7,11,0,0,795,171,1,0,0,0,796,797,5,93,0,0,797,799,5,
        1,0,0,798,800,3,174,87,0,799,798,1,0,0,0,800,801,1,0,0,0,801,799,
        1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,5,2,0,0,804,173,
        1,0,0,0,805,808,3,8,4,0,806,808,3,10,5,0,807,805,1,0,0,0,807,806,
        1,0,0,0,808,175,1,0,0,0,89,181,187,196,199,202,211,222,225,228,236,
        248,250,261,269,277,281,292,301,305,312,316,320,327,334,341,373,
        381,392,402,414,416,425,431,434,440,445,450,455,458,461,464,467,
        470,488,491,494,497,500,503,506,509,512,515,533,538,545,550,558,
        579,584,592,595,598,601,604,607,610,613,618,623,632,636,645,667,
        681,694,698,704,710,717,730,733,741,751,763,769,778,801,807
    ]

class govdslParser ( Parser ):

    grammarFileName = "govdsl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'ComposedPolicy'", "'MajorityPolicy'", 
                     "'LeaderDrivenPolicy'", "'AbsoluteMajorityPolicy'", 
                     "'ConsensusPolicy'", "'LazyConsensusPolicy'", "'VotingPolicy'", 
                     "'Scopes'", "':'", "'Scope'", "'Projects'", "'from'", 
                     "'Activities'", "'GitHub'", "'GitLab'", "'Tasks'", 
                     "'MemberLifecycle'", "'Issue'", "'Pull request'", "'All'", 
                     "'Action'", "'onboard'", "'remove'", "'Status'", "'completed'", 
                     "'accepted'", "'partial'", "'merge'", "'review'", "'release'", 
                     "'Labels'", "','", "'DecisionType'", "'as'", "'BooleanDecision'", 
                     "'StringList'", "'ElementList'", "'CommunicationChannel'", 
                     "'Participants'", "'Roles'", "'Individuals'", "'vote value'", 
                     "'profile'", "'role'", "'(Agent)'", "'confidence'", 
                     "'autonomy level'", "'explainability'", "'Profiles'", 
                     "'gender'", "'race'", "'language'", "'Participant list'", 
                     "'Conditions'", "'Deadline'", "'MinDecisionTime'", 
                     "'days'", "'weeks'", "'months'", "'years'", "'/'", 
                     "'ParticipantExclusion'", "'MinParticipants'", "'VetoRight'", 
                     "'AppealRight'", "'Appealers'", "'Policy'", "'CheckCiCd'", 
                     "'MinTime'", "'of'", "'Activity'", "'InActivity'", 
                     "'pre'", "'post'", "'concurrent'", "'LabelCondition'", 
                     "'include'", "'not'", "'Parameters'", "'ratio'", "'default'", 
                     "'fallback'", "'Order'", "'Execution'", "'sequential'", 
                     "'parallel'", "'RequireAll'", "'CarryOver'", "'true'", 
                     "'false'", "'Phases'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ID", "SIGNED_INT", "FLOAT", 
                      "WS" ]

    RULE_governance = 0
    RULE_policy = 1
    RULE_topLevelSinglePolicy = 2
    RULE_topLevelComposedPolicy = 3
    RULE_nestedSinglePolicy = 4
    RULE_nestedComposedPolicy = 5
    RULE_policyType = 6
    RULE_scopes = 7
    RULE_scope = 8
    RULE_projects = 9
    RULE_project = 10
    RULE_platform = 11
    RULE_repoID = 12
    RULE_activities = 13
    RULE_activity = 14
    RULE_tasks = 15
    RULE_task = 16
    RULE_patchTask = 17
    RULE_memberTask = 18
    RULE_patchTaskType = 19
    RULE_patchTaskContent = 20
    RULE_actionWithLabels = 21
    RULE_memberTaskContent = 22
    RULE_memberAction = 23
    RULE_memberActionEnum = 24
    RULE_status = 25
    RULE_statusEnum = 26
    RULE_patchAction = 27
    RULE_patchActionEnum = 28
    RULE_labels = 29
    RULE_decisionType = 30
    RULE_booleanDecision = 31
    RULE_stringList = 32
    RULE_elementList = 33
    RULE_communicationChannel = 34
    RULE_participants = 35
    RULE_roles = 36
    RULE_role = 37
    RULE_individuals = 38
    RULE_individualEntry = 39
    RULE_individual = 40
    RULE_voteValue = 41
    RULE_withProfile = 42
    RULE_withRole = 43
    RULE_agent = 44
    RULE_confidence = 45
    RULE_autonomyLevel = 46
    RULE_explainability = 47
    RULE_profiles = 48
    RULE_profile = 49
    RULE_profileAttr = 50
    RULE_gender = 51
    RULE_race = 52
    RULE_language = 53
    RULE_policyParticipants = 54
    RULE_partID = 55
    RULE_hasRole = 56
    RULE_conditions = 57
    RULE_deadline = 58
    RULE_minDecisionTime = 59
    RULE_offset = 60
    RULE_deadlineID = 61
    RULE_timeUnit = 62
    RULE_date = 63
    RULE_participantExclusion = 64
    RULE_minParticipant = 65
    RULE_vetoRight = 66
    RULE_appealRight = 67
    RULE_checkCiCd = 68
    RULE_minTime = 69
    RULE_activityBool = 70
    RULE_evaluationMode = 71
    RULE_labelsCondition = 72
    RULE_include = 73
    RULE_parameters = 74
    RULE_votParams = 75
    RULE_ratio = 76
    RULE_default = 77
    RULE_fallback = 78
    RULE_policyReference = 79
    RULE_order = 80
    RULE_orderType = 81
    RULE_orderTypeValue = 82
    RULE_orderMode = 83
    RULE_carryOver = 84
    RULE_booleanValue = 85
    RULE_phases = 86
    RULE_nestedPolicy = 87

    ruleNames =  [ "governance", "policy", "topLevelSinglePolicy", "topLevelComposedPolicy", 
                   "nestedSinglePolicy", "nestedComposedPolicy", "policyType", 
                   "scopes", "scope", "projects", "project", "platform", 
                   "repoID", "activities", "activity", "tasks", "task", 
                   "patchTask", "memberTask", "patchTaskType", "patchTaskContent", 
                   "actionWithLabels", "memberTaskContent", "memberAction", 
                   "memberActionEnum", "status", "statusEnum", "patchAction", 
                   "patchActionEnum", "labels", "decisionType", "booleanDecision", 
                   "stringList", "elementList", "communicationChannel", 
                   "participants", "roles", "role", "individuals", "individualEntry", 
                   "individual", "voteValue", "withProfile", "withRole", 
                   "agent", "confidence", "autonomyLevel", "explainability", 
                   "profiles", "profile", "profileAttr", "gender", "race", 
                   "language", "policyParticipants", "partID", "hasRole", 
                   "conditions", "deadline", "minDecisionTime", "offset", 
                   "deadlineID", "timeUnit", "date", "participantExclusion", 
                   "minParticipant", "vetoRight", "appealRight", "checkCiCd", 
                   "minTime", "activityBool", "evaluationMode", "labelsCondition", 
                   "include", "parameters", "votParams", "ratio", "default", 
                   "fallback", "policyReference", "order", "orderType", 
                   "orderTypeValue", "orderMode", "carryOver", "booleanValue", 
                   "phases", "nestedPolicy" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    ID=94
    SIGNED_INT=95
    FLOAT=96
    WS=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class GovernanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(govdslParser.EOF, 0)

        def scopes(self):
            return self.getTypedRuleContext(govdslParser.ScopesContext,0)


        def participants(self):
            return self.getTypedRuleContext(govdslParser.ParticipantsContext,0)


        def policy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.PolicyContext)
            else:
                return self.getTypedRuleContext(govdslParser.PolicyContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_governance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGovernance" ):
                listener.enterGovernance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGovernance" ):
                listener.exitGovernance(self)




    def governance(self):

        localctx = govdslParser.GovernanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_governance)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.scopes()
            self.state = 177
            self.participants()
            self.state = 179 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 178
                self.policy()
                self.state = 181 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0)):
                    break

            self.state = 183
            self.match(govdslParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelSinglePolicy(self):
            return self.getTypedRuleContext(govdslParser.TopLevelSinglePolicyContext,0)


        def topLevelComposedPolicy(self):
            return self.getTypedRuleContext(govdslParser.TopLevelComposedPolicyContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicy" ):
                listener.enterPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicy" ):
                listener.exitPolicy(self)




    def policy(self):

        localctx = govdslParser.PolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 6, 7, 8, 9]:
                self.state = 185
                self.topLevelSinglePolicy()
                pass
            elif token in [3]:
                self.state = 186
                self.topLevelComposedPolicy()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelSinglePolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def policyType(self):
            return self.getTypedRuleContext(govdslParser.PolicyTypeContext,0)


        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def scope(self):
            return self.getTypedRuleContext(govdslParser.ScopeContext,0)


        def decisionType(self):
            return self.getTypedRuleContext(govdslParser.DecisionTypeContext,0)


        def policyParticipants(self):
            return self.getTypedRuleContext(govdslParser.PolicyParticipantsContext,0)


        def communicationChannel(self):
            return self.getTypedRuleContext(govdslParser.CommunicationChannelContext,0)


        def conditions(self):
            return self.getTypedRuleContext(govdslParser.ConditionsContext,0)


        def parameters(self):
            return self.getTypedRuleContext(govdslParser.ParametersContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_topLevelSinglePolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelSinglePolicy" ):
                listener.enterTopLevelSinglePolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelSinglePolicy" ):
                listener.exitTopLevelSinglePolicy(self)




    def topLevelSinglePolicy(self):

        localctx = govdslParser.TopLevelSinglePolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelSinglePolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.policyType()
            self.state = 190
            self.match(govdslParser.ID)
            self.state = 191
            self.match(govdslParser.T__0)
            self.state = 192
            self.scope()
            self.state = 193
            self.decisionType()
            self.state = 194
            self.policyParticipants()
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 195
                self.communicationChannel()


            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 198
                self.conditions()


            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 201
                self.parameters()


            self.state = 204
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelComposedPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def scope(self):
            return self.getTypedRuleContext(govdslParser.ScopeContext,0)


        def phases(self):
            return self.getTypedRuleContext(govdslParser.PhasesContext,0)


        def order(self):
            return self.getTypedRuleContext(govdslParser.OrderContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_topLevelComposedPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelComposedPolicy" ):
                listener.enterTopLevelComposedPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelComposedPolicy" ):
                listener.exitTopLevelComposedPolicy(self)




    def topLevelComposedPolicy(self):

        localctx = govdslParser.TopLevelComposedPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelComposedPolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(govdslParser.T__2)
            self.state = 207
            self.match(govdslParser.ID)
            self.state = 208
            self.match(govdslParser.T__0)
            self.state = 209
            self.scope()
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 210
                self.order()


            self.state = 213
            self.phases()
            self.state = 214
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedSinglePolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def policyType(self):
            return self.getTypedRuleContext(govdslParser.PolicyTypeContext,0)


        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def decisionType(self):
            return self.getTypedRuleContext(govdslParser.DecisionTypeContext,0)


        def policyParticipants(self):
            return self.getTypedRuleContext(govdslParser.PolicyParticipantsContext,0)


        def communicationChannel(self):
            return self.getTypedRuleContext(govdslParser.CommunicationChannelContext,0)


        def conditions(self):
            return self.getTypedRuleContext(govdslParser.ConditionsContext,0)


        def parameters(self):
            return self.getTypedRuleContext(govdslParser.ParametersContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_nestedSinglePolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedSinglePolicy" ):
                listener.enterNestedSinglePolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedSinglePolicy" ):
                listener.exitNestedSinglePolicy(self)




    def nestedSinglePolicy(self):

        localctx = govdslParser.NestedSinglePolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_nestedSinglePolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.policyType()
            self.state = 217
            self.match(govdslParser.ID)
            self.state = 218
            self.match(govdslParser.T__0)
            self.state = 219
            self.decisionType()
            self.state = 220
            self.policyParticipants()
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 221
                self.communicationChannel()


            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 224
                self.conditions()


            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 227
                self.parameters()


            self.state = 230
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedComposedPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def phases(self):
            return self.getTypedRuleContext(govdslParser.PhasesContext,0)


        def order(self):
            return self.getTypedRuleContext(govdslParser.OrderContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_nestedComposedPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedComposedPolicy" ):
                listener.enterNestedComposedPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedComposedPolicy" ):
                listener.exitNestedComposedPolicy(self)




    def nestedComposedPolicy(self):

        localctx = govdslParser.NestedComposedPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_nestedComposedPolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(govdslParser.T__2)
            self.state = 233
            self.match(govdslParser.ID)
            self.state = 234
            self.match(govdslParser.T__0)
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 235
                self.order()


            self.state = 238
            self.phases()
            self.state = 239
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_policyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicyType" ):
                listener.enterPolicyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicyType" ):
                listener.exitPolicyType(self)




    def policyType(self):

        localctx = govdslParser.PolicyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_policyType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def projects(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProjectsContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProjectsContext,i)


        def activities(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ActivitiesContext)
            else:
                return self.getTypedRuleContext(govdslParser.ActivitiesContext,i)


        def tasks(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.TasksContext)
            else:
                return self.getTypedRuleContext(govdslParser.TasksContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_scopes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopes" ):
                listener.enterScopes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopes" ):
                listener.exitScopes(self)




    def scopes(self):

        localctx = govdslParser.ScopesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scopes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(govdslParser.T__9)
            self.state = 244
            self.match(govdslParser.T__10)
            self.state = 248 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 248
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 245
                    self.projects()
                    pass
                elif token in [15]:
                    self.state = 246
                    self.activities()
                    pass
                elif token in [18]:
                    self.state = 247
                    self.tasks()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 303104) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)




    def scope(self):

        localctx = govdslParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_scope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(govdslParser.T__11)
            self.state = 253
            self.match(govdslParser.T__10)
            self.state = 254
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProjectContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProjectContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_projects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjects" ):
                listener.enterProjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjects" ):
                listener.exitProjects(self)




    def projects(self):

        localctx = govdslParser.ProjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_projects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(govdslParser.T__12)
            self.state = 257
            self.match(govdslParser.T__10)
            self.state = 259 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 258
                self.project()
                self.state = 261 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def platform(self):
            return self.getTypedRuleContext(govdslParser.PlatformContext,0)


        def repoID(self):
            return self.getTypedRuleContext(govdslParser.RepoIDContext,0)


        def activity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ActivityContext)
            else:
                return self.getTypedRuleContext(govdslParser.ActivityContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject" ):
                listener.enterProject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject" ):
                listener.exitProject(self)




    def project(self):

        localctx = govdslParser.ProjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(govdslParser.ID)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 264
                self.match(govdslParser.T__13)
                self.state = 265
                self.platform()
                self.state = 266
                self.match(govdslParser.T__10)
                self.state = 267
                self.repoID()


            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 271
                self.match(govdslParser.T__0)
                self.state = 272
                self.match(govdslParser.T__14)
                self.state = 273
                self.match(govdslParser.T__10)
                self.state = 275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 274
                    self.activity()
                    self.state = 277 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 279
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlatformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_platform

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform" ):
                listener.enterPlatform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform" ):
                listener.exitPlatform(self)




    def platform(self):

        localctx = govdslParser.PlatformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_platform)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepoIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_repoID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepoID" ):
                listener.enterRepoID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepoID" ):
                listener.exitRepoID(self)




    def repoID(self):

        localctx = govdslParser.RepoIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_repoID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def activity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ActivityContext)
            else:
                return self.getTypedRuleContext(govdslParser.ActivityContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_activities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivities" ):
                listener.enterActivities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivities" ):
                listener.exitActivities(self)




    def activities(self):

        localctx = govdslParser.ActivitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_activities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(govdslParser.T__14)
            self.state = 288
            self.match(govdslParser.T__10)
            self.state = 290 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 289
                self.activity()
                self.state = 292 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def task(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.TaskContext)
            else:
                return self.getTypedRuleContext(govdslParser.TaskContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_activity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivity" ):
                listener.enterActivity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivity" ):
                listener.exitActivity(self)




    def activity(self):

        localctx = govdslParser.ActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_activity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(govdslParser.ID)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 295
                self.match(govdslParser.T__0)
                self.state = 296
                self.match(govdslParser.T__17)
                self.state = 297
                self.match(govdslParser.T__10)
                self.state = 299 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 298
                    self.task()
                    self.state = 301 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 303
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TasksContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def task(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.TaskContext)
            else:
                return self.getTypedRuleContext(govdslParser.TaskContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_tasks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTasks" ):
                listener.enterTasks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTasks" ):
                listener.exitTasks(self)




    def tasks(self):

        localctx = govdslParser.TasksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_tasks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(govdslParser.T__17)
            self.state = 308
            self.match(govdslParser.T__10)
            self.state = 310 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 309
                self.task()
                self.state = 312 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def patchTask(self):
            return self.getTypedRuleContext(govdslParser.PatchTaskContext,0)


        def memberTask(self):
            return self.getTypedRuleContext(govdslParser.MemberTaskContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask" ):
                listener.enterTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask" ):
                listener.exitTask(self)




    def task(self):

        localctx = govdslParser.TaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_task)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(govdslParser.ID)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 315
                self.match(govdslParser.T__10)


            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 21, 22]:
                self.state = 318
                self.patchTask()
                pass
            elif token in [19]:
                self.state = 319
                self.memberTask()
                pass
            elif token in [2, 13, 15, 18, 41, 94]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patchTaskType(self):
            return self.getTypedRuleContext(govdslParser.PatchTaskTypeContext,0)


        def patchTaskContent(self):
            return self.getTypedRuleContext(govdslParser.PatchTaskContentContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_patchTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchTask" ):
                listener.enterPatchTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchTask" ):
                listener.exitPatchTask(self)




    def patchTask(self):

        localctx = govdslParser.PatchTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_patchTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.patchTaskType()
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 323
                self.match(govdslParser.T__0)
                self.state = 324
                self.patchTaskContent()
                self.state = 325
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberTaskContent(self):
            return self.getTypedRuleContext(govdslParser.MemberTaskContentContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_memberTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberTask" ):
                listener.enterMemberTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberTask" ):
                listener.exitMemberTask(self)




    def memberTask(self):

        localctx = govdslParser.MemberTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_memberTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(govdslParser.T__18)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 330
                self.match(govdslParser.T__0)
                self.state = 331
                self.memberTaskContent()
                self.state = 332
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchTaskTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_patchTaskType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchTaskType" ):
                listener.enterPatchTaskType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchTaskType" ):
                listener.exitPatchTaskType(self)




    def patchTaskType(self):

        localctx = govdslParser.PatchTaskTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_patchTaskType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7340032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchTaskContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def status(self):
            return self.getTypedRuleContext(govdslParser.StatusContext,0)


        def patchAction(self):
            return self.getTypedRuleContext(govdslParser.PatchActionContext,0)


        def actionWithLabels(self):
            return self.getTypedRuleContext(govdslParser.ActionWithLabelsContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_patchTaskContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchTaskContent" ):
                listener.enterPatchTaskContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchTaskContent" ):
                listener.exitPatchTaskContent(self)




    def patchTaskContent(self):

        localctx = govdslParser.PatchTaskContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_patchTaskContent)
        try:
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.status()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.patchAction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.actionWithLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionWithLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patchAction(self):
            return self.getTypedRuleContext(govdslParser.PatchActionContext,0)


        def labels(self):
            return self.getTypedRuleContext(govdslParser.LabelsContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_actionWithLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionWithLabels" ):
                listener.enterActionWithLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionWithLabels" ):
                listener.exitActionWithLabels(self)




    def actionWithLabels(self):

        localctx = govdslParser.ActionWithLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_actionWithLabels)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.patchAction()
            self.state = 344
            self.labels()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberTaskContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberAction(self):
            return self.getTypedRuleContext(govdslParser.MemberActionContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_memberTaskContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberTaskContent" ):
                listener.enterMemberTaskContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberTaskContent" ):
                listener.exitMemberTaskContent(self)




    def memberTaskContent(self):

        localctx = govdslParser.MemberTaskContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_memberTaskContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.memberAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberActionEnum(self):
            return self.getTypedRuleContext(govdslParser.MemberActionEnumContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_memberAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAction" ):
                listener.enterMemberAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAction" ):
                listener.exitMemberAction(self)




    def memberAction(self):

        localctx = govdslParser.MemberActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_memberAction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(govdslParser.T__22)
            self.state = 349
            self.match(govdslParser.T__10)
            self.state = 350
            self.memberActionEnum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberActionEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_memberActionEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberActionEnum" ):
                listener.enterMemberActionEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberActionEnum" ):
                listener.exitMemberActionEnum(self)




    def memberActionEnum(self):

        localctx = govdslParser.MemberActionEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_memberActionEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statusEnum(self):
            return self.getTypedRuleContext(govdslParser.StatusEnumContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_status

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatus" ):
                listener.enterStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatus" ):
                listener.exitStatus(self)




    def status(self):

        localctx = govdslParser.StatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_status)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(govdslParser.T__25)
            self.state = 355
            self.match(govdslParser.T__10)
            self.state = 356
            self.statusEnum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_statusEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatusEnum" ):
                listener.enterStatusEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatusEnum" ):
                listener.exitStatusEnum(self)




    def statusEnum(self):

        localctx = govdslParser.StatusEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_statusEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 939524096) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patchActionEnum(self):
            return self.getTypedRuleContext(govdslParser.PatchActionEnumContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_patchAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchAction" ):
                listener.enterPatchAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchAction" ):
                listener.exitPatchAction(self)




    def patchAction(self):

        localctx = govdslParser.PatchActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_patchAction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(govdslParser.T__22)
            self.state = 361
            self.match(govdslParser.T__10)
            self.state = 362
            self.patchActionEnum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchActionEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_patchActionEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchActionEnum" ):
                listener.enterPatchActionEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchActionEnum" ):
                listener.exitPatchActionEnum(self)




    def patchActionEnum(self):

        localctx = govdslParser.PatchActionEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_patchActionEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabels" ):
                listener.enterLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabels" ):
                listener.exitLabels(self)




    def labels(self):

        localctx = govdslParser.LabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_labels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(govdslParser.T__32)
            self.state = 367
            self.match(govdslParser.T__10)
            self.state = 368
            self.match(govdslParser.ID)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 369
                self.match(govdslParser.T__33)
                self.state = 370
                self.match(govdslParser.ID)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecisionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanDecision(self):
            return self.getTypedRuleContext(govdslParser.BooleanDecisionContext,0)


        def stringList(self):
            return self.getTypedRuleContext(govdslParser.StringListContext,0)


        def elementList(self):
            return self.getTypedRuleContext(govdslParser.ElementListContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_decisionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecisionType" ):
                listener.enterDecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecisionType" ):
                listener.exitDecisionType(self)




    def decisionType(self):

        localctx = govdslParser.DecisionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_decisionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(govdslParser.T__34)
            self.state = 377
            self.match(govdslParser.T__35)
            self.state = 381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 378
                self.booleanDecision()
                pass
            elif token in [38]:
                self.state = 379
                self.stringList()
                pass
            elif token in [39]:
                self.state = 380
                self.elementList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanDecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_booleanDecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDecision" ):
                listener.enterBooleanDecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDecision" ):
                listener.exitBooleanDecision(self)




    def booleanDecision(self):

        localctx = govdslParser.BooleanDecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_booleanDecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(govdslParser.T__36)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)




    def stringList(self):

        localctx = govdslParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(govdslParser.T__37)
            self.state = 386
            self.match(govdslParser.T__10)
            self.state = 387
            self.match(govdslParser.ID)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 388
                self.match(govdslParser.T__33)
                self.state = 389
                self.match(govdslParser.ID)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)




    def elementList(self):

        localctx = govdslParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(govdslParser.T__38)
            self.state = 396
            self.match(govdslParser.T__10)
            self.state = 397
            self.match(govdslParser.ID)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 398
                self.match(govdslParser.T__33)
                self.state = 399
                self.match(govdslParser.ID)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationChannelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_communicationChannel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationChannel" ):
                listener.enterCommunicationChannel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationChannel" ):
                listener.exitCommunicationChannel(self)




    def communicationChannel(self):

        localctx = govdslParser.CommunicationChannelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_communicationChannel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(govdslParser.T__39)
            self.state = 406
            self.match(govdslParser.T__10)
            self.state = 407
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParticipantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roles(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.RolesContext)
            else:
                return self.getTypedRuleContext(govdslParser.RolesContext,i)


        def individuals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.IndividualsContext)
            else:
                return self.getTypedRuleContext(govdslParser.IndividualsContext,i)


        def profiles(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProfilesContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProfilesContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_participants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParticipants" ):
                listener.enterParticipants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParticipants" ):
                listener.exitParticipants(self)




    def participants(self):

        localctx = govdslParser.ParticipantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_participants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(govdslParser.T__40)
            self.state = 410
            self.match(govdslParser.T__10)
            self.state = 414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42]:
                    self.state = 411
                    self.roles()
                    pass
                elif token in [43]:
                    self.state = 412
                    self.individuals()
                    pass
                elif token in [51]:
                    self.state = 413
                    self.profiles()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2264993953218560) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def role(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.RoleContext)
            else:
                return self.getTypedRuleContext(govdslParser.RoleContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)




    def roles(self):

        localctx = govdslParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(govdslParser.T__41)
            self.state = 419
            self.match(govdslParser.T__10)
            self.state = 420
            self.role()
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 421
                self.match(govdslParser.T__33)
                self.state = 422
                self.role()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def voteValue(self):
            return self.getTypedRuleContext(govdslParser.VoteValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole" ):
                listener.enterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole" ):
                listener.exitRole(self)




    def role(self):

        localctx = govdslParser.RoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(govdslParser.ID)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 429
                self.match(govdslParser.T__0)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 430
                    self.voteValue()


                self.state = 433
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndividualsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def individualEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.IndividualEntryContext)
            else:
                return self.getTypedRuleContext(govdslParser.IndividualEntryContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_individuals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividuals" ):
                listener.enterIndividuals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividuals" ):
                listener.exitIndividuals(self)




    def individuals(self):

        localctx = govdslParser.IndividualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_individuals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(govdslParser.T__42)
            self.state = 437
            self.match(govdslParser.T__10)
            self.state = 438
            self.individualEntry()
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 1152921504606855169) != 0):
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 439
                    self.match(govdslParser.T__33)


                self.state = 442
                self.individualEntry()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndividualEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def individual(self):
            return self.getTypedRuleContext(govdslParser.IndividualContext,0)


        def agent(self):
            return self.getTypedRuleContext(govdslParser.AgentContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_individualEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividualEntry" ):
                listener.enterIndividualEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividualEntry" ):
                listener.exitIndividualEntry(self)




    def individualEntry(self):

        localctx = govdslParser.IndividualEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_individualEntry)
        try:
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.individual()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.agent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndividualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def voteValue(self):
            return self.getTypedRuleContext(govdslParser.VoteValueContext,0)


        def withProfile(self):
            return self.getTypedRuleContext(govdslParser.WithProfileContext,0)


        def withRole(self):
            return self.getTypedRuleContext(govdslParser.WithRoleContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_individual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividual" ):
                listener.enterIndividual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividual" ):
                listener.exitIndividual(self)




    def individual(self):

        localctx = govdslParser.IndividualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_individual)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(govdslParser.ID)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 453
                self.match(govdslParser.T__0)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 454
                    self.voteValue()


                self.state = 458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 457
                    self.match(govdslParser.T__33)


                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 460
                    self.withProfile()


                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 463
                    self.match(govdslParser.T__33)


                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 466
                    self.withRole()


                self.state = 469
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VoteValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_voteValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoteValue" ):
                listener.enterVoteValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoteValue" ):
                listener.exitVoteValue(self)




    def voteValue(self):

        localctx = govdslParser.VoteValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_voteValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(govdslParser.T__43)
            self.state = 473
            self.match(govdslParser.T__10)
            self.state = 474
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithProfileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_withProfile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithProfile" ):
                listener.enterWithProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithProfile" ):
                listener.exitWithProfile(self)




    def withProfile(self):

        localctx = govdslParser.WithProfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_withProfile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(govdslParser.T__44)
            self.state = 477
            self.match(govdslParser.T__10)
            self.state = 478
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_withRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithRole" ):
                listener.enterWithRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithRole" ):
                listener.exitWithRole(self)




    def withRole(self):

        localctx = govdslParser.WithRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_withRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(govdslParser.T__45)
            self.state = 481
            self.match(govdslParser.T__10)
            self.state = 482
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AgentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def voteValue(self):
            return self.getTypedRuleContext(govdslParser.VoteValueContext,0)


        def confidence(self):
            return self.getTypedRuleContext(govdslParser.ConfidenceContext,0)


        def autonomyLevel(self):
            return self.getTypedRuleContext(govdslParser.AutonomyLevelContext,0)


        def explainability(self):
            return self.getTypedRuleContext(govdslParser.ExplainabilityContext,0)


        def withRole(self):
            return self.getTypedRuleContext(govdslParser.WithRoleContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_agent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent" ):
                listener.enterAgent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent" ):
                listener.exitAgent(self)




    def agent(self):

        localctx = govdslParser.AgentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_agent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(govdslParser.T__46)
            self.state = 485
            self.match(govdslParser.ID)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 486
                self.match(govdslParser.T__0)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 487
                    self.voteValue()


                self.state = 491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 490
                    self.match(govdslParser.T__33)


                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 493
                    self.confidence()


                self.state = 497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 496
                    self.match(govdslParser.T__33)


                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 499
                    self.autonomyLevel()


                self.state = 503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 502
                    self.match(govdslParser.T__33)


                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 505
                    self.explainability()


                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 508
                    self.match(govdslParser.T__33)


                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 511
                    self.withRole()


                self.state = 514
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfidenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_confidence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfidence" ):
                listener.enterConfidence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfidence" ):
                listener.exitConfidence(self)




    def confidence(self):

        localctx = govdslParser.ConfidenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_confidence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(govdslParser.T__47)
            self.state = 518
            self.match(govdslParser.T__10)
            self.state = 519
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AutonomyLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_autonomyLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutonomyLevel" ):
                listener.enterAutonomyLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutonomyLevel" ):
                listener.exitAutonomyLevel(self)




    def autonomyLevel(self):

        localctx = govdslParser.AutonomyLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_autonomyLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(govdslParser.T__48)
            self.state = 522
            self.match(govdslParser.T__10)
            self.state = 523
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_explainability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainability" ):
                listener.enterExplainability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainability" ):
                listener.exitExplainability(self)




    def explainability(self):

        localctx = govdslParser.ExplainabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_explainability)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(govdslParser.T__49)
            self.state = 526
            self.match(govdslParser.T__10)
            self.state = 527
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def profile(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProfileContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProfileContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_profiles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfiles" ):
                listener.enterProfiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfiles" ):
                listener.exitProfiles(self)




    def profiles(self):

        localctx = govdslParser.ProfilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_profiles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(govdslParser.T__50)
            self.state = 530
            self.match(govdslParser.T__10)
            self.state = 531
            self.profile()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34 or _la==94:
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 532
                    self.match(govdslParser.T__33)


                self.state = 535
                self.profile()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def profileAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProfileAttrContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProfileAttrContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_profile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile" ):
                listener.enterProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile" ):
                listener.exitProfile(self)




    def profile(self):

        localctx = govdslParser.ProfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_profile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(govdslParser.ID)
            self.state = 542
            self.match(govdslParser.T__0)
            self.state = 543
            self.profileAttr()
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 31525214571462656) != 0):
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 544
                    self.match(govdslParser.T__33)


                self.state = 547
                self.profileAttr()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 553
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gender(self):
            return self.getTypedRuleContext(govdslParser.GenderContext,0)


        def race(self):
            return self.getTypedRuleContext(govdslParser.RaceContext,0)


        def language(self):
            return self.getTypedRuleContext(govdslParser.LanguageContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_profileAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfileAttr" ):
                listener.enterProfileAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfileAttr" ):
                listener.exitProfileAttr(self)




    def profileAttr(self):

        localctx = govdslParser.ProfileAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_profileAttr)
        try:
            self.state = 558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.gender()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.race()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 3)
                self.state = 557
                self.language()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_gender

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGender" ):
                listener.enterGender(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGender" ):
                listener.exitGender(self)




    def gender(self):

        localctx = govdslParser.GenderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_gender)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(govdslParser.T__51)
            self.state = 561
            self.match(govdslParser.T__10)
            self.state = 562
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_race

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRace" ):
                listener.enterRace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRace" ):
                listener.exitRace(self)




    def race(self):

        localctx = govdslParser.RaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_race)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(govdslParser.T__52)
            self.state = 565
            self.match(govdslParser.T__10)
            self.state = 566
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_language

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage" ):
                listener.enterLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage" ):
                listener.exitLanguage(self)




    def language(self):

        localctx = govdslParser.LanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_language)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(govdslParser.T__53)
            self.state = 569
            self.match(govdslParser.T__10)
            self.state = 570
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyParticipantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.PartIDContext)
            else:
                return self.getTypedRuleContext(govdslParser.PartIDContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_policyParticipants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicyParticipants" ):
                listener.enterPolicyParticipants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicyParticipants" ):
                listener.exitPolicyParticipants(self)




    def policyParticipants(self):

        localctx = govdslParser.PolicyParticipantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_policyParticipants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(govdslParser.T__54)
            self.state = 573
            self.match(govdslParser.T__10)
            self.state = 574
            self.partID()
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 575
                self.match(govdslParser.T__33)
                self.state = 576
                self.partID()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def hasRole(self):
            return self.getTypedRuleContext(govdslParser.HasRoleContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_partID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartID" ):
                listener.enterPartID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartID" ):
                listener.exitPartID(self)




    def partID(self):

        localctx = govdslParser.PartIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partID)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(govdslParser.ID)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 583
                self.hasRole()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HasRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_hasRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasRole" ):
                listener.enterHasRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasRole" ):
                listener.exitHasRole(self)




    def hasRole(self):

        localctx = govdslParser.HasRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_hasRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(govdslParser.T__35)
            self.state = 587
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deadline(self):
            return self.getTypedRuleContext(govdslParser.DeadlineContext,0)


        def minDecisionTime(self):
            return self.getTypedRuleContext(govdslParser.MinDecisionTimeContext,0)


        def participantExclusion(self):
            return self.getTypedRuleContext(govdslParser.ParticipantExclusionContext,0)


        def minParticipant(self):
            return self.getTypedRuleContext(govdslParser.MinParticipantContext,0)


        def vetoRight(self):
            return self.getTypedRuleContext(govdslParser.VetoRightContext,0)


        def appealRight(self):
            return self.getTypedRuleContext(govdslParser.AppealRightContext,0)


        def checkCiCd(self):
            return self.getTypedRuleContext(govdslParser.CheckCiCdContext,0)


        def minTime(self):
            return self.getTypedRuleContext(govdslParser.MinTimeContext,0)


        def labelsCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.LabelsConditionContext)
            else:
                return self.getTypedRuleContext(govdslParser.LabelsConditionContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_conditions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditions" ):
                listener.enterConditions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditions" ):
                listener.exitConditions(self)




    def conditions(self):

        localctx = govdslParser.ConditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(govdslParser.T__55)
            self.state = 590
            self.match(govdslParser.T__10)
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 591
                self.deadline()


            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 594
                self.minDecisionTime()


            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 597
                self.participantExclusion()


            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 600
                self.minParticipant()


            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 603
                self.vetoRight()


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 606
                self.appealRight()


            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 609
                self.checkCiCd()


            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 612
                self.minTime()


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 615
                self.labelsCondition()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeadlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def offset(self):
            return self.getTypedRuleContext(govdslParser.OffsetContext,0)


        def date(self):
            return self.getTypedRuleContext(govdslParser.DateContext,0)


        def deadlineID(self):
            return self.getTypedRuleContext(govdslParser.DeadlineIDContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_deadline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeadline" ):
                listener.enterDeadline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeadline" ):
                listener.exitDeadline(self)




    def deadline(self):

        localctx = govdslParser.DeadlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_deadline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(govdslParser.T__56)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 622
                self.deadlineID()


            self.state = 625
            self.match(govdslParser.T__10)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 626
                self.offset()
                pass

            elif la_ == 2:
                self.state = 627
                self.date()
                pass

            elif la_ == 3:
                self.state = 628
                self.offset()
                self.state = 629
                self.match(govdslParser.T__33)
                self.state = 630
                self.date()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinDecisionTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def offset(self):
            return self.getTypedRuleContext(govdslParser.OffsetContext,0)


        def date(self):
            return self.getTypedRuleContext(govdslParser.DateContext,0)


        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_minDecisionTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinDecisionTime" ):
                listener.enterMinDecisionTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinDecisionTime" ):
                listener.exitMinDecisionTime(self)




    def minDecisionTime(self):

        localctx = govdslParser.MinDecisionTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_minDecisionTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(govdslParser.T__57)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 635
                self.match(govdslParser.ID)


            self.state = 638
            self.match(govdslParser.T__10)
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 639
                self.offset()
                pass

            elif la_ == 2:
                self.state = 640
                self.date()
                pass

            elif la_ == 3:
                self.state = 641
                self.offset()
                self.state = 642
                self.match(govdslParser.T__33)
                self.state = 643
                self.date()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_INT(self):
            return self.getToken(govdslParser.SIGNED_INT, 0)

        def timeUnit(self):
            return self.getTypedRuleContext(govdslParser.TimeUnitContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = govdslParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(govdslParser.SIGNED_INT)
            self.state = 648
            self.timeUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeadlineIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_deadlineID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeadlineID" ):
                listener.enterDeadlineID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeadlineID" ):
                listener.exitDeadlineID(self)




    def deadlineID(self):

        localctx = govdslParser.DeadlineIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_deadlineID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_timeUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeUnit" ):
                listener.enterTimeUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeUnit" ):
                listener.exitTimeUnit(self)




    def timeUnit(self):

        localctx = govdslParser.TimeUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_timeUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911284551352320) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_INT(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.SIGNED_INT)
            else:
                return self.getToken(govdslParser.SIGNED_INT, i)

        def getRuleIndex(self):
            return govdslParser.RULE_date

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate" ):
                listener.enterDate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate" ):
                listener.exitDate(self)




    def date(self):

        localctx = govdslParser.DateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(govdslParser.SIGNED_INT)
            self.state = 655
            self.match(govdslParser.T__62)
            self.state = 656
            self.match(govdslParser.SIGNED_INT)
            self.state = 657
            self.match(govdslParser.T__62)
            self.state = 658
            self.match(govdslParser.SIGNED_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParticipantExclusionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_participantExclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParticipantExclusion" ):
                listener.enterParticipantExclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParticipantExclusion" ):
                listener.exitParticipantExclusion(self)




    def participantExclusion(self):

        localctx = govdslParser.ParticipantExclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_participantExclusion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(govdslParser.T__63)
            self.state = 661
            self.match(govdslParser.T__10)
            self.state = 662
            self.match(govdslParser.ID)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 663
                self.match(govdslParser.T__33)
                self.state = 664
                self.match(govdslParser.ID)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinParticipantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_INT(self):
            return self.getToken(govdslParser.SIGNED_INT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_minParticipant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinParticipant" ):
                listener.enterMinParticipant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinParticipant" ):
                listener.exitMinParticipant(self)




    def minParticipant(self):

        localctx = govdslParser.MinParticipantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_minParticipant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(govdslParser.T__64)
            self.state = 671
            self.match(govdslParser.T__10)
            self.state = 672
            self.match(govdslParser.SIGNED_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VetoRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_vetoRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVetoRight" ):
                listener.enterVetoRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVetoRight" ):
                listener.exitVetoRight(self)




    def vetoRight(self):

        localctx = govdslParser.VetoRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vetoRight)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(govdslParser.T__65)
            self.state = 675
            self.match(govdslParser.T__10)
            self.state = 676
            self.match(govdslParser.ID)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 677
                self.match(govdslParser.T__33)
                self.state = 678
                self.match(govdslParser.ID)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppealRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def nestedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedPolicyContext,0)


        def policyReference(self):
            return self.getTypedRuleContext(govdslParser.PolicyReferenceContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_appealRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppealRight" ):
                listener.enterAppealRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppealRight" ):
                listener.exitAppealRight(self)




    def appealRight(self):

        localctx = govdslParser.AppealRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_appealRight)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(govdslParser.T__66)
            self.state = 685
            self.match(govdslParser.T__10)
            self.state = 686
            self.match(govdslParser.T__0)
            self.state = 687
            self.match(govdslParser.T__67)
            self.state = 688
            self.match(govdslParser.T__10)
            self.state = 689
            self.match(govdslParser.ID)
            self.state = 694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 690
                    self.match(govdslParser.T__33)
                    self.state = 691
                    self.match(govdslParser.ID) 
                self.state = 696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 697
                self.match(govdslParser.T__33)


            self.state = 700
            self.match(govdslParser.T__68)
            self.state = 701
            self.match(govdslParser.T__10)
            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 9]:
                self.state = 702
                self.nestedPolicy()
                pass
            elif token in [94]:
                self.state = 703
                self.policyReference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 706
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckCiCdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValue(self):
            return self.getTypedRuleContext(govdslParser.BooleanValueContext,0)


        def evaluationMode(self):
            return self.getTypedRuleContext(govdslParser.EvaluationModeContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_checkCiCd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckCiCd" ):
                listener.enterCheckCiCd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckCiCd" ):
                listener.exitCheckCiCd(self)




    def checkCiCd(self):

        localctx = govdslParser.CheckCiCdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_checkCiCd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(govdslParser.T__69)
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 709
                self.evaluationMode()


            self.state = 712
            self.match(govdslParser.T__10)
            self.state = 713
            self.booleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def activityBool(self):
            return self.getTypedRuleContext(govdslParser.ActivityBoolContext,0)


        def offset(self):
            return self.getTypedRuleContext(govdslParser.OffsetContext,0)


        def evaluationMode(self):
            return self.getTypedRuleContext(govdslParser.EvaluationModeContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_minTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinTime" ):
                listener.enterMinTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinTime" ):
                listener.exitMinTime(self)




    def minTime(self):

        localctx = govdslParser.MinTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_minTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(govdslParser.T__70)
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 716
                self.evaluationMode()


            self.state = 719
            self.match(govdslParser.T__71)
            self.state = 720
            self.activityBool()
            self.state = 721
            self.match(govdslParser.T__10)
            self.state = 722
            self.offset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivityBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_activityBool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivityBool" ):
                listener.enterActivityBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivityBool" ):
                listener.exitActivityBool(self)




    def activityBool(self):

        localctx = govdslParser.ActivityBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_activityBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            _la = self._input.LA(1)
            if not(_la==73 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluationModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_evaluationMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluationMode" ):
                listener.enterEvaluationMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluationMode" ):
                listener.exitEvaluationMode(self)




    def evaluationMode(self):

        localctx = govdslParser.EvaluationModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_evaluationMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelsConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def evaluationMode(self):
            return self.getTypedRuleContext(govdslParser.EvaluationModeContext,0)


        def include(self):
            return self.getTypedRuleContext(govdslParser.IncludeContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_labelsCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelsCondition" ):
                listener.enterLabelsCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelsCondition" ):
                listener.exitLabelsCondition(self)




    def labelsCondition(self):

        localctx = govdslParser.LabelsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_labelsCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(govdslParser.T__77)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 729
                self.evaluationMode()


            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==80:
                self.state = 732
                self.include()


            self.state = 735
            self.match(govdslParser.T__10)
            self.state = 736
            self.match(govdslParser.ID)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 737
                self.match(govdslParser.T__33)
                self.state = 738
                self.match(govdslParser.ID)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)




    def include(self):

        localctx = govdslParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_include)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            _la = self._input.LA(1)
            if not(_la==79 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def votParams(self):
            return self.getTypedRuleContext(govdslParser.VotParamsContext,0)


        def default(self):
            return self.getTypedRuleContext(govdslParser.DefaultContext,0)


        def fallback(self):
            return self.getTypedRuleContext(govdslParser.FallbackContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = govdslParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(govdslParser.T__80)
            self.state = 747
            self.match(govdslParser.T__10)
            self.state = 751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 748
                self.votParams()
                pass
            elif token in [83]:
                self.state = 749
                self.default()
                pass
            elif token in [84]:
                self.state = 750
                self.fallback()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VotParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ratio(self):
            return self.getTypedRuleContext(govdslParser.RatioContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_votParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVotParams" ):
                listener.enterVotParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVotParams" ):
                listener.exitVotParams(self)




    def votParams(self):

        localctx = govdslParser.VotParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_votParams)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.ratio()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_ratio

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatio" ):
                listener.enterRatio(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatio" ):
                listener.exitRatio(self)




    def ratio(self):

        localctx = govdslParser.RatioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ratio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(govdslParser.T__81)
            self.state = 756
            self.match(govdslParser.T__10)
            self.state = 757
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedPolicyContext,0)


        def policyReference(self):
            return self.getTypedRuleContext(govdslParser.PolicyReferenceContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)




    def default(self):

        localctx = govdslParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(govdslParser.T__82)
            self.state = 760
            self.match(govdslParser.T__10)
            self.state = 763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 9]:
                self.state = 761
                self.nestedPolicy()
                pass
            elif token in [94]:
                self.state = 762
                self.policyReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallbackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedPolicyContext,0)


        def policyReference(self):
            return self.getTypedRuleContext(govdslParser.PolicyReferenceContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_fallback

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallback" ):
                listener.enterFallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallback" ):
                listener.exitFallback(self)




    def fallback(self):

        localctx = govdslParser.FallbackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_fallback)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(govdslParser.T__83)
            self.state = 766
            self.match(govdslParser.T__10)
            self.state = 769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 9]:
                self.state = 767
                self.nestedPolicy()
                pass
            elif token in [94]:
                self.state = 768
                self.policyReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_policyReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicyReference" ):
                listener.enterPolicyReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicyReference" ):
                listener.exitPolicyReference(self)




    def policyReference(self):

        localctx = govdslParser.PolicyReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_policyReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderType(self):
            return self.getTypedRuleContext(govdslParser.OrderTypeContext,0)


        def orderMode(self):
            return self.getTypedRuleContext(govdslParser.OrderModeContext,0)


        def carryOver(self):
            return self.getTypedRuleContext(govdslParser.CarryOverContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder" ):
                listener.enterOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder" ):
                listener.exitOrder(self)




    def order(self):

        localctx = govdslParser.OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(govdslParser.T__84)
            self.state = 774
            self.match(govdslParser.T__10)

            self.state = 775
            self.orderType()
            self.state = 776
            self.orderMode()
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 777
                self.carryOver()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderTypeValue(self):
            return self.getTypedRuleContext(govdslParser.OrderTypeValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_orderType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderType" ):
                listener.enterOrderType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderType" ):
                listener.exitOrderType(self)




    def orderType(self):

        localctx = govdslParser.OrderTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_orderType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(govdslParser.T__85)
            self.state = 781
            self.match(govdslParser.T__10)
            self.state = 782
            self.orderTypeValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderTypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_orderTypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderTypeValue" ):
                listener.enterOrderTypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderTypeValue" ):
                listener.exitOrderTypeValue(self)




    def orderTypeValue(self):

        localctx = govdslParser.OrderTypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_orderTypeValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValue(self):
            return self.getTypedRuleContext(govdslParser.BooleanValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_orderMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderMode" ):
                listener.enterOrderMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderMode" ):
                listener.exitOrderMode(self)




    def orderMode(self):

        localctx = govdslParser.OrderModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_orderMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(govdslParser.T__88)
            self.state = 787
            self.match(govdslParser.T__10)
            self.state = 788
            self.booleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CarryOverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValue(self):
            return self.getTypedRuleContext(govdslParser.BooleanValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_carryOver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarryOver" ):
                listener.enterCarryOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarryOver" ):
                listener.exitCarryOver(self)




    def carryOver(self):

        localctx = govdslParser.CarryOverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_carryOver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(govdslParser.T__89)
            self.state = 791
            self.match(govdslParser.T__10)
            self.state = 792
            self.booleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = govdslParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            _la = self._input.LA(1)
            if not(_la==91 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedPolicy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.NestedPolicyContext)
            else:
                return self.getTypedRuleContext(govdslParser.NestedPolicyContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhases" ):
                listener.enterPhases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhases" ):
                listener.exitPhases(self)




    def phases(self):

        localctx = govdslParser.PhasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_phases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(govdslParser.T__92)
            self.state = 797
            self.match(govdslParser.T__0)
            self.state = 799 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 798
                self.nestedPolicy()
                self.state = 801 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0)):
                    break

            self.state = 803
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedSinglePolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedSinglePolicyContext,0)


        def nestedComposedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedComposedPolicyContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_nestedPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedPolicy" ):
                listener.enterNestedPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedPolicy" ):
                listener.exitNestedPolicy(self)




    def nestedPolicy(self):

        localctx = govdslParser.NestedPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_nestedPolicy)
        try:
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 6, 7, 8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.nestedSinglePolicy()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.nestedComposedPolicy()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





