# Generated from govdsl.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,97,834,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,1,0,1,0,1,0,4,0,178,8,0,11,0,12,0,179,1,0,1,0,1,1,
        1,1,3,1,186,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,195,8,2,1,2,3,2,
        198,8,2,1,2,3,2,201,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,210,8,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,221,8,4,1,4,3,4,224,8,4,
        1,4,3,4,227,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,235,8,5,1,5,1,5,1,5,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,4,7,247,8,7,11,7,12,7,248,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,4,9,258,8,9,11,9,12,9,259,1,10,1,10,1,10,1,10,
        1,10,1,10,3,10,268,8,10,1,10,1,10,1,10,1,10,4,10,274,8,10,11,10,
        12,10,275,1,10,1,10,3,10,280,8,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,13,4,13,289,8,13,11,13,12,13,290,1,14,1,14,1,14,1,14,1,14,4,14,
        298,8,14,11,14,12,14,299,1,14,1,14,3,14,304,8,14,1,15,1,15,1,15,
        4,15,309,8,15,11,15,12,15,310,1,16,1,16,3,16,315,8,16,1,16,1,16,
        3,16,319,8,16,1,17,1,17,1,17,1,17,1,17,3,17,326,8,17,1,18,1,18,1,
        18,1,18,1,18,3,18,333,8,18,1,19,1,19,1,20,1,20,1,20,3,20,340,8,20,
        1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,
        1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,5,29,370,8,29,10,29,12,29,373,9,29,1,30,1,30,1,30,1,30,
        1,30,3,30,380,8,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,5,32,389,8,
        32,10,32,12,32,392,9,32,1,33,1,33,1,33,1,33,1,33,5,33,399,8,33,10,
        33,12,33,402,9,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,4,
        35,413,8,35,11,35,12,35,414,1,36,1,36,1,36,1,36,1,36,5,36,422,8,
        36,10,36,12,36,425,9,36,1,37,1,37,1,37,3,37,430,8,37,1,37,3,37,433,
        8,37,1,38,1,38,1,38,1,38,3,38,439,8,38,1,38,5,38,442,8,38,10,38,
        12,38,445,9,38,1,39,1,39,3,39,449,8,39,1,40,1,40,1,40,3,40,454,8,
        40,1,40,3,40,457,8,40,1,40,3,40,460,8,40,1,40,3,40,463,8,40,1,40,
        3,40,466,8,40,1,40,3,40,469,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,487,8,44,1,
        44,3,44,490,8,44,1,44,3,44,493,8,44,1,44,3,44,496,8,44,1,44,3,44,
        499,8,44,1,44,3,44,502,8,44,1,44,3,44,505,8,44,1,44,3,44,508,8,44,
        1,44,3,44,511,8,44,1,44,3,44,514,8,44,1,45,1,45,1,45,1,45,1,46,1,
        46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,532,8,
        48,1,48,5,48,535,8,48,10,48,12,48,538,9,48,1,49,1,49,1,49,1,49,3,
        49,544,8,49,1,49,3,49,547,8,49,1,49,3,49,550,8,49,1,49,3,49,553,
        8,49,1,49,1,49,3,49,557,8,49,1,49,3,49,560,8,49,1,49,3,49,563,8,
        49,1,49,3,49,566,8,49,1,49,1,49,3,49,570,8,49,1,49,3,49,573,8,49,
        1,49,3,49,576,8,49,1,49,3,49,579,8,49,3,49,581,8,49,1,49,1,49,1,
        50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,
        53,1,53,1,53,1,53,5,53,602,8,53,10,53,12,53,605,9,53,1,54,1,54,3,
        54,609,8,54,1,55,1,55,1,55,1,56,1,56,1,56,3,56,617,8,56,1,56,3,56,
        620,8,56,1,56,3,56,623,8,56,1,56,3,56,626,8,56,1,56,3,56,629,8,56,
        1,56,3,56,632,8,56,1,56,3,56,635,8,56,1,56,3,56,638,8,56,1,56,5,
        56,641,8,56,10,56,12,56,644,9,56,1,57,1,57,3,57,648,8,57,1,57,1,
        57,1,57,1,57,1,57,1,57,1,57,3,57,657,8,57,1,58,1,58,3,58,661,8,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,670,8,58,1,59,1,59,1,59,
        1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,
        1,63,1,63,5,63,690,8,63,10,63,12,63,693,9,63,1,64,1,64,1,64,1,64,
        1,65,1,65,1,65,1,65,1,65,5,65,704,8,65,10,65,12,65,707,9,65,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,717,8,66,10,66,12,66,720,
        9,66,1,66,3,66,723,8,66,1,66,1,66,1,66,1,66,3,66,729,8,66,1,66,1,
        66,1,67,1,67,3,67,735,8,67,1,67,1,67,1,67,1,68,1,68,3,68,742,8,68,
        1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,3,71,755,
        8,71,1,71,3,71,758,8,71,1,71,1,71,1,71,1,71,5,71,764,8,71,10,71,
        12,71,767,9,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,3,73,776,8,73,
        1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,3,76,788,8,76,
        1,77,1,77,1,77,1,77,3,77,794,8,77,1,78,1,78,1,79,1,79,1,79,1,79,
        1,79,3,79,803,8,79,1,80,1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,82,
        1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,85,1,85,1,85,4,85,824,8,85,
        11,85,12,85,825,1,85,1,85,1,86,1,86,3,86,832,8,86,1,86,0,0,87,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,0,12,1,0,4,9,1,0,16,17,1,0,20,22,
        1,0,24,25,1,0,27,29,1,0,30,32,1,0,59,62,1,0,73,74,1,0,75,77,1,0,
        79,80,1,0,87,88,1,0,91,92,854,0,174,1,0,0,0,2,185,1,0,0,0,4,187,
        1,0,0,0,6,204,1,0,0,0,8,214,1,0,0,0,10,230,1,0,0,0,12,239,1,0,0,
        0,14,241,1,0,0,0,16,250,1,0,0,0,18,254,1,0,0,0,20,261,1,0,0,0,22,
        281,1,0,0,0,24,283,1,0,0,0,26,285,1,0,0,0,28,292,1,0,0,0,30,305,
        1,0,0,0,32,312,1,0,0,0,34,320,1,0,0,0,36,327,1,0,0,0,38,334,1,0,
        0,0,40,339,1,0,0,0,42,341,1,0,0,0,44,344,1,0,0,0,46,346,1,0,0,0,
        48,350,1,0,0,0,50,352,1,0,0,0,52,356,1,0,0,0,54,358,1,0,0,0,56,362,
        1,0,0,0,58,364,1,0,0,0,60,374,1,0,0,0,62,381,1,0,0,0,64,383,1,0,
        0,0,66,393,1,0,0,0,68,403,1,0,0,0,70,407,1,0,0,0,72,416,1,0,0,0,
        74,426,1,0,0,0,76,434,1,0,0,0,78,448,1,0,0,0,80,450,1,0,0,0,82,470,
        1,0,0,0,84,474,1,0,0,0,86,478,1,0,0,0,88,482,1,0,0,0,90,515,1,0,
        0,0,92,519,1,0,0,0,94,523,1,0,0,0,96,527,1,0,0,0,98,539,1,0,0,0,
        100,584,1,0,0,0,102,588,1,0,0,0,104,592,1,0,0,0,106,596,1,0,0,0,
        108,606,1,0,0,0,110,610,1,0,0,0,112,613,1,0,0,0,114,645,1,0,0,0,
        116,658,1,0,0,0,118,671,1,0,0,0,120,674,1,0,0,0,122,676,1,0,0,0,
        124,678,1,0,0,0,126,684,1,0,0,0,128,694,1,0,0,0,130,698,1,0,0,0,
        132,708,1,0,0,0,134,732,1,0,0,0,136,739,1,0,0,0,138,748,1,0,0,0,
        140,750,1,0,0,0,142,752,1,0,0,0,144,768,1,0,0,0,146,770,1,0,0,0,
        148,777,1,0,0,0,150,779,1,0,0,0,152,783,1,0,0,0,154,789,1,0,0,0,
        156,795,1,0,0,0,158,797,1,0,0,0,160,804,1,0,0,0,162,808,1,0,0,0,
        164,810,1,0,0,0,166,814,1,0,0,0,168,818,1,0,0,0,170,820,1,0,0,0,
        172,831,1,0,0,0,174,175,3,14,7,0,175,177,3,70,35,0,176,178,3,2,1,
        0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,
        0,180,181,1,0,0,0,181,182,5,0,0,1,182,1,1,0,0,0,183,186,3,4,2,0,
        184,186,3,6,3,0,185,183,1,0,0,0,185,184,1,0,0,0,186,3,1,0,0,0,187,
        188,3,12,6,0,188,189,5,94,0,0,189,190,5,1,0,0,190,191,3,16,8,0,191,
        192,3,60,30,0,192,194,3,106,53,0,193,195,3,68,34,0,194,193,1,0,0,
        0,194,195,1,0,0,0,195,197,1,0,0,0,196,198,3,112,56,0,197,196,1,0,
        0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,201,3,146,73,0,200,199,1,
        0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,203,5,2,0,0,203,5,1,0,
        0,0,204,205,5,3,0,0,205,206,5,94,0,0,206,207,5,1,0,0,207,209,3,16,
        8,0,208,210,3,158,79,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,
        0,0,0,211,212,3,170,85,0,212,213,5,2,0,0,213,7,1,0,0,0,214,215,3,
        12,6,0,215,216,5,94,0,0,216,217,5,1,0,0,217,218,3,60,30,0,218,220,
        3,106,53,0,219,221,3,68,34,0,220,219,1,0,0,0,220,221,1,0,0,0,221,
        223,1,0,0,0,222,224,3,112,56,0,223,222,1,0,0,0,223,224,1,0,0,0,224,
        226,1,0,0,0,225,227,3,146,73,0,226,225,1,0,0,0,226,227,1,0,0,0,227,
        228,1,0,0,0,228,229,5,2,0,0,229,9,1,0,0,0,230,231,5,3,0,0,231,232,
        5,94,0,0,232,234,5,1,0,0,233,235,3,158,79,0,234,233,1,0,0,0,234,
        235,1,0,0,0,235,236,1,0,0,0,236,237,3,170,85,0,237,238,5,2,0,0,238,
        11,1,0,0,0,239,240,7,0,0,0,240,13,1,0,0,0,241,242,5,10,0,0,242,246,
        5,11,0,0,243,247,3,18,9,0,244,247,3,26,13,0,245,247,3,30,15,0,246,
        243,1,0,0,0,246,244,1,0,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,
        246,1,0,0,0,248,249,1,0,0,0,249,15,1,0,0,0,250,251,5,12,0,0,251,
        252,5,11,0,0,252,253,5,94,0,0,253,17,1,0,0,0,254,255,5,13,0,0,255,
        257,5,11,0,0,256,258,3,20,10,0,257,256,1,0,0,0,258,259,1,0,0,0,259,
        257,1,0,0,0,259,260,1,0,0,0,260,19,1,0,0,0,261,267,5,94,0,0,262,
        263,5,14,0,0,263,264,3,22,11,0,264,265,5,11,0,0,265,266,3,24,12,
        0,266,268,1,0,0,0,267,262,1,0,0,0,267,268,1,0,0,0,268,279,1,0,0,
        0,269,270,5,1,0,0,270,271,5,15,0,0,271,273,5,11,0,0,272,274,3,28,
        14,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,
        0,0,276,277,1,0,0,0,277,278,5,2,0,0,278,280,1,0,0,0,279,269,1,0,
        0,0,279,280,1,0,0,0,280,21,1,0,0,0,281,282,7,1,0,0,282,23,1,0,0,
        0,283,284,5,94,0,0,284,25,1,0,0,0,285,286,5,15,0,0,286,288,5,11,
        0,0,287,289,3,28,14,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,
        0,0,0,290,291,1,0,0,0,291,27,1,0,0,0,292,303,5,94,0,0,293,294,5,
        1,0,0,294,295,5,18,0,0,295,297,5,11,0,0,296,298,3,32,16,0,297,296,
        1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,301,
        1,0,0,0,301,302,5,2,0,0,302,304,1,0,0,0,303,293,1,0,0,0,303,304,
        1,0,0,0,304,29,1,0,0,0,305,306,5,18,0,0,306,308,5,11,0,0,307,309,
        3,32,16,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,
        1,0,0,0,311,31,1,0,0,0,312,314,5,94,0,0,313,315,5,11,0,0,314,313,
        1,0,0,0,314,315,1,0,0,0,315,318,1,0,0,0,316,319,3,34,17,0,317,319,
        3,36,18,0,318,316,1,0,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,33,
        1,0,0,0,320,325,3,38,19,0,321,322,5,1,0,0,322,323,3,40,20,0,323,
        324,5,2,0,0,324,326,1,0,0,0,325,321,1,0,0,0,325,326,1,0,0,0,326,
        35,1,0,0,0,327,332,5,19,0,0,328,329,5,1,0,0,329,330,3,44,22,0,330,
        331,5,2,0,0,331,333,1,0,0,0,332,328,1,0,0,0,332,333,1,0,0,0,333,
        37,1,0,0,0,334,335,7,2,0,0,335,39,1,0,0,0,336,340,3,50,25,0,337,
        340,3,54,27,0,338,340,3,42,21,0,339,336,1,0,0,0,339,337,1,0,0,0,
        339,338,1,0,0,0,340,41,1,0,0,0,341,342,3,54,27,0,342,343,3,58,29,
        0,343,43,1,0,0,0,344,345,3,46,23,0,345,45,1,0,0,0,346,347,5,23,0,
        0,347,348,5,11,0,0,348,349,3,48,24,0,349,47,1,0,0,0,350,351,7,3,
        0,0,351,49,1,0,0,0,352,353,5,26,0,0,353,354,5,11,0,0,354,355,3,52,
        26,0,355,51,1,0,0,0,356,357,7,4,0,0,357,53,1,0,0,0,358,359,5,23,
        0,0,359,360,5,11,0,0,360,361,3,56,28,0,361,55,1,0,0,0,362,363,7,
        5,0,0,363,57,1,0,0,0,364,365,5,33,0,0,365,366,5,11,0,0,366,371,5,
        94,0,0,367,368,5,34,0,0,368,370,5,94,0,0,369,367,1,0,0,0,370,373,
        1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,59,1,0,0,0,373,371,1,
        0,0,0,374,375,5,35,0,0,375,379,5,36,0,0,376,380,3,62,31,0,377,380,
        3,64,32,0,378,380,3,66,33,0,379,376,1,0,0,0,379,377,1,0,0,0,379,
        378,1,0,0,0,380,61,1,0,0,0,381,382,5,37,0,0,382,63,1,0,0,0,383,384,
        5,38,0,0,384,385,5,11,0,0,385,390,5,94,0,0,386,387,5,34,0,0,387,
        389,5,94,0,0,388,386,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,
        391,1,0,0,0,391,65,1,0,0,0,392,390,1,0,0,0,393,394,5,39,0,0,394,
        395,5,11,0,0,395,400,5,94,0,0,396,397,5,34,0,0,397,399,5,94,0,0,
        398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,
        401,67,1,0,0,0,402,400,1,0,0,0,403,404,5,40,0,0,404,405,5,11,0,0,
        405,406,5,94,0,0,406,69,1,0,0,0,407,408,5,41,0,0,408,412,5,11,0,
        0,409,413,3,72,36,0,410,413,3,76,38,0,411,413,3,96,48,0,412,409,
        1,0,0,0,412,410,1,0,0,0,412,411,1,0,0,0,413,414,1,0,0,0,414,412,
        1,0,0,0,414,415,1,0,0,0,415,71,1,0,0,0,416,417,5,42,0,0,417,418,
        5,11,0,0,418,423,3,74,37,0,419,420,5,34,0,0,420,422,3,74,37,0,421,
        419,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,
        73,1,0,0,0,425,423,1,0,0,0,426,432,5,94,0,0,427,429,5,1,0,0,428,
        430,3,82,41,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,
        433,5,2,0,0,432,427,1,0,0,0,432,433,1,0,0,0,433,75,1,0,0,0,434,435,
        5,43,0,0,435,436,5,11,0,0,436,443,3,78,39,0,437,439,5,34,0,0,438,
        437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,442,3,78,39,0,441,
        438,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,
        77,1,0,0,0,445,443,1,0,0,0,446,449,3,80,40,0,447,449,3,88,44,0,448,
        446,1,0,0,0,448,447,1,0,0,0,449,79,1,0,0,0,450,468,5,94,0,0,451,
        453,5,1,0,0,452,454,3,82,41,0,453,452,1,0,0,0,453,454,1,0,0,0,454,
        456,1,0,0,0,455,457,5,34,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,
        459,1,0,0,0,458,460,3,84,42,0,459,458,1,0,0,0,459,460,1,0,0,0,460,
        462,1,0,0,0,461,463,5,34,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,
        465,1,0,0,0,464,466,3,86,43,0,465,464,1,0,0,0,465,466,1,0,0,0,466,
        467,1,0,0,0,467,469,5,2,0,0,468,451,1,0,0,0,468,469,1,0,0,0,469,
        81,1,0,0,0,470,471,5,44,0,0,471,472,5,11,0,0,472,473,5,96,0,0,473,
        83,1,0,0,0,474,475,5,45,0,0,475,476,5,11,0,0,476,477,5,94,0,0,477,
        85,1,0,0,0,478,479,5,46,0,0,479,480,5,11,0,0,480,481,5,94,0,0,481,
        87,1,0,0,0,482,483,5,47,0,0,483,513,5,94,0,0,484,486,5,1,0,0,485,
        487,3,82,41,0,486,485,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,
        490,5,34,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,
        493,3,90,45,0,492,491,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,
        496,5,34,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,
        499,3,92,46,0,498,497,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,
        502,5,34,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,
        505,3,94,47,0,504,503,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,
        508,5,34,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,510,1,0,0,0,509,
        511,3,86,43,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,
        514,5,2,0,0,513,484,1,0,0,0,513,514,1,0,0,0,514,89,1,0,0,0,515,516,
        5,48,0,0,516,517,5,11,0,0,517,518,5,96,0,0,518,91,1,0,0,0,519,520,
        5,49,0,0,520,521,5,11,0,0,521,522,5,96,0,0,522,93,1,0,0,0,523,524,
        5,50,0,0,524,525,5,11,0,0,525,526,5,96,0,0,526,95,1,0,0,0,527,528,
        5,51,0,0,528,529,5,11,0,0,529,536,3,98,49,0,530,532,5,34,0,0,531,
        530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,535,3,98,49,0,534,
        531,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,
        97,1,0,0,0,538,536,1,0,0,0,539,540,5,94,0,0,540,580,5,1,0,0,541,
        543,3,100,50,0,542,544,5,34,0,0,543,542,1,0,0,0,543,544,1,0,0,0,
        544,546,1,0,0,0,545,547,3,102,51,0,546,545,1,0,0,0,546,547,1,0,0,
        0,547,549,1,0,0,0,548,550,5,34,0,0,549,548,1,0,0,0,549,550,1,0,0,
        0,550,552,1,0,0,0,551,553,3,104,52,0,552,551,1,0,0,0,552,553,1,0,
        0,0,553,581,1,0,0,0,554,556,3,102,51,0,555,557,5,34,0,0,556,555,
        1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,560,3,100,50,0,559,558,
        1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,563,5,34,0,0,562,561,
        1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,566,3,104,52,0,565,564,
        1,0,0,0,565,566,1,0,0,0,566,581,1,0,0,0,567,569,3,104,52,0,568,570,
        5,34,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,573,
        3,100,50,0,572,571,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,
        5,34,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,579,
        3,102,51,0,578,577,1,0,0,0,578,579,1,0,0,0,579,581,1,0,0,0,580,541,
        1,0,0,0,580,554,1,0,0,0,580,567,1,0,0,0,581,582,1,0,0,0,582,583,
        5,2,0,0,583,99,1,0,0,0,584,585,5,52,0,0,585,586,5,11,0,0,586,587,
        5,94,0,0,587,101,1,0,0,0,588,589,5,53,0,0,589,590,5,11,0,0,590,591,
        5,94,0,0,591,103,1,0,0,0,592,593,5,54,0,0,593,594,5,11,0,0,594,595,
        5,94,0,0,595,105,1,0,0,0,596,597,5,55,0,0,597,598,5,11,0,0,598,603,
        3,108,54,0,599,600,5,34,0,0,600,602,3,108,54,0,601,599,1,0,0,0,602,
        605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,107,1,0,0,0,605,
        603,1,0,0,0,606,608,5,94,0,0,607,609,3,110,55,0,608,607,1,0,0,0,
        608,609,1,0,0,0,609,109,1,0,0,0,610,611,5,36,0,0,611,612,5,94,0,
        0,612,111,1,0,0,0,613,614,5,56,0,0,614,616,5,11,0,0,615,617,3,114,
        57,0,616,615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,620,3,116,
        58,0,619,618,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,623,3,126,
        63,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,626,3,128,
        64,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,629,3,130,
        65,0,628,627,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,632,3,132,
        66,0,631,630,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,635,3,134,
        67,0,634,633,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,638,3,136,
        68,0,637,636,1,0,0,0,637,638,1,0,0,0,638,642,1,0,0,0,639,641,3,142,
        71,0,640,639,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,
        0,0,643,113,1,0,0,0,644,642,1,0,0,0,645,647,5,57,0,0,646,648,3,120,
        60,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,656,5,11,
        0,0,650,657,3,118,59,0,651,657,3,124,62,0,652,653,3,118,59,0,653,
        654,5,34,0,0,654,655,3,124,62,0,655,657,1,0,0,0,656,650,1,0,0,0,
        656,651,1,0,0,0,656,652,1,0,0,0,657,115,1,0,0,0,658,660,5,58,0,0,
        659,661,5,94,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,
        662,669,5,11,0,0,663,670,3,118,59,0,664,670,3,124,62,0,665,666,3,
        118,59,0,666,667,5,34,0,0,667,668,3,124,62,0,668,670,1,0,0,0,669,
        663,1,0,0,0,669,664,1,0,0,0,669,665,1,0,0,0,670,117,1,0,0,0,671,
        672,5,95,0,0,672,673,3,122,61,0,673,119,1,0,0,0,674,675,5,94,0,0,
        675,121,1,0,0,0,676,677,7,6,0,0,677,123,1,0,0,0,678,679,5,95,0,0,
        679,680,5,63,0,0,680,681,5,95,0,0,681,682,5,63,0,0,682,683,5,95,
        0,0,683,125,1,0,0,0,684,685,5,64,0,0,685,686,5,11,0,0,686,691,5,
        94,0,0,687,688,5,34,0,0,688,690,5,94,0,0,689,687,1,0,0,0,690,693,
        1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,127,1,0,0,0,693,691,
        1,0,0,0,694,695,5,65,0,0,695,696,5,11,0,0,696,697,5,95,0,0,697,129,
        1,0,0,0,698,699,5,66,0,0,699,700,5,11,0,0,700,705,5,94,0,0,701,702,
        5,34,0,0,702,704,5,94,0,0,703,701,1,0,0,0,704,707,1,0,0,0,705,703,
        1,0,0,0,705,706,1,0,0,0,706,131,1,0,0,0,707,705,1,0,0,0,708,709,
        5,67,0,0,709,710,5,11,0,0,710,711,5,1,0,0,711,712,5,68,0,0,712,713,
        5,11,0,0,713,718,5,94,0,0,714,715,5,34,0,0,715,717,5,94,0,0,716,
        714,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,
        722,1,0,0,0,720,718,1,0,0,0,721,723,5,34,0,0,722,721,1,0,0,0,722,
        723,1,0,0,0,723,724,1,0,0,0,724,725,5,69,0,0,725,728,5,11,0,0,726,
        729,3,172,86,0,727,729,3,156,78,0,728,726,1,0,0,0,728,727,1,0,0,
        0,729,730,1,0,0,0,730,731,5,2,0,0,731,133,1,0,0,0,732,734,5,70,0,
        0,733,735,3,140,70,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,
        0,0,736,737,5,11,0,0,737,738,3,168,84,0,738,135,1,0,0,0,739,741,
        5,71,0,0,740,742,3,140,70,0,741,740,1,0,0,0,741,742,1,0,0,0,742,
        743,1,0,0,0,743,744,5,72,0,0,744,745,3,138,69,0,745,746,5,11,0,0,
        746,747,3,118,59,0,747,137,1,0,0,0,748,749,7,7,0,0,749,139,1,0,0,
        0,750,751,7,8,0,0,751,141,1,0,0,0,752,754,5,78,0,0,753,755,3,140,
        70,0,754,753,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,758,3,144,
        72,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,11,
        0,0,760,765,5,94,0,0,761,762,5,34,0,0,762,764,5,94,0,0,763,761,1,
        0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,143,1,
        0,0,0,767,765,1,0,0,0,768,769,7,9,0,0,769,145,1,0,0,0,770,771,5,
        81,0,0,771,775,5,11,0,0,772,776,3,148,74,0,773,776,3,152,76,0,774,
        776,3,154,77,0,775,772,1,0,0,0,775,773,1,0,0,0,775,774,1,0,0,0,776,
        147,1,0,0,0,777,778,3,150,75,0,778,149,1,0,0,0,779,780,5,82,0,0,
        780,781,5,11,0,0,781,782,5,96,0,0,782,151,1,0,0,0,783,784,5,83,0,
        0,784,787,5,11,0,0,785,788,3,172,86,0,786,788,3,156,78,0,787,785,
        1,0,0,0,787,786,1,0,0,0,788,153,1,0,0,0,789,790,5,84,0,0,790,793,
        5,11,0,0,791,794,3,172,86,0,792,794,3,156,78,0,793,791,1,0,0,0,793,
        792,1,0,0,0,794,155,1,0,0,0,795,796,5,94,0,0,796,157,1,0,0,0,797,
        798,5,85,0,0,798,799,5,11,0,0,799,800,3,160,80,0,800,802,3,164,82,
        0,801,803,3,166,83,0,802,801,1,0,0,0,802,803,1,0,0,0,803,159,1,0,
        0,0,804,805,5,86,0,0,805,806,5,11,0,0,806,807,3,162,81,0,807,161,
        1,0,0,0,808,809,7,10,0,0,809,163,1,0,0,0,810,811,5,89,0,0,811,812,
        5,11,0,0,812,813,3,168,84,0,813,165,1,0,0,0,814,815,5,90,0,0,815,
        816,5,11,0,0,816,817,3,168,84,0,817,167,1,0,0,0,818,819,7,11,0,0,
        819,169,1,0,0,0,820,821,5,93,0,0,821,823,5,1,0,0,822,824,3,172,86,
        0,823,822,1,0,0,0,824,825,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,
        0,826,827,1,0,0,0,827,828,5,2,0,0,828,171,1,0,0,0,829,832,3,8,4,
        0,830,832,3,10,5,0,831,829,1,0,0,0,831,830,1,0,0,0,832,173,1,0,0,
        0,99,179,185,194,197,200,209,220,223,226,234,246,248,259,267,275,
        279,290,299,303,310,314,318,325,332,339,371,379,390,400,412,414,
        423,429,432,438,443,448,453,456,459,462,465,468,486,489,492,495,
        498,501,504,507,510,513,531,536,543,546,549,552,556,559,562,565,
        569,572,575,578,580,603,608,616,619,622,625,628,631,634,637,642,
        647,656,660,669,691,705,718,722,728,734,741,754,757,765,775,787,
        793,802,825,831
    ]

class govdslParser ( Parser ):

    grammarFileName = "govdsl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'ComposedPolicy'", "'MajorityPolicy'", 
                     "'LeaderDrivenPolicy'", "'AbsoluteMajorityPolicy'", 
                     "'ConsensusPolicy'", "'LazyConsensusPolicy'", "'VotingPolicy'", 
                     "'Scopes'", "':'", "'Scope'", "'Projects'", "'from'", 
                     "'Activities'", "'GitHub'", "'GitLab'", "'Tasks'", 
                     "'MemberLifecycle'", "'Issue'", "'Pull request'", "'All'", 
                     "'Action'", "'onboard'", "'remove'", "'Status'", "'completed'", 
                     "'accepted'", "'partial'", "'merge'", "'review'", "'release'", 
                     "'Labels'", "','", "'DecisionType'", "'as'", "'BooleanDecision'", 
                     "'StringList'", "'ElementList'", "'CommunicationChannel'", 
                     "'Participants'", "'Roles'", "'Individuals'", "'vote value'", 
                     "'profile'", "'role'", "'(Agent)'", "'confidence'", 
                     "'autonomy level'", "'explainability'", "'Profiles'", 
                     "'gender'", "'race'", "'language'", "'Participant list'", 
                     "'Conditions'", "'Deadline'", "'MinDecisionTime'", 
                     "'days'", "'weeks'", "'months'", "'years'", "'/'", 
                     "'ParticipantExclusion'", "'MinParticipants'", "'VetoRight'", 
                     "'AppealRight'", "'Appealers'", "'Policy'", "'CheckCiCd'", 
                     "'MinTime'", "'of'", "'Activity'", "'InActivity'", 
                     "'pre'", "'post'", "'concurrent'", "'LabelCondition'", 
                     "'include'", "'not'", "'Parameters'", "'ratio'", "'default'", 
                     "'fallback'", "'Order'", "'Execution'", "'sequential'", 
                     "'parallel'", "'RequireAll'", "'CarryOver'", "'true'", 
                     "'false'", "'Phases'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ID", "SIGNED_INT", "FLOAT", 
                      "WS" ]

    RULE_governance = 0
    RULE_policy = 1
    RULE_topLevelSinglePolicy = 2
    RULE_topLevelComposedPolicy = 3
    RULE_nestedSinglePolicy = 4
    RULE_nestedComposedPolicy = 5
    RULE_policyType = 6
    RULE_scopes = 7
    RULE_scope = 8
    RULE_projects = 9
    RULE_project = 10
    RULE_platform = 11
    RULE_repoID = 12
    RULE_activities = 13
    RULE_activity = 14
    RULE_tasks = 15
    RULE_task = 16
    RULE_patchTask = 17
    RULE_memberTask = 18
    RULE_patchTaskType = 19
    RULE_patchTaskContent = 20
    RULE_actionWithLabels = 21
    RULE_memberTaskContent = 22
    RULE_memberAction = 23
    RULE_memberActionEnum = 24
    RULE_status = 25
    RULE_statusEnum = 26
    RULE_patchAction = 27
    RULE_patchActionEnum = 28
    RULE_labels = 29
    RULE_decisionType = 30
    RULE_booleanDecision = 31
    RULE_stringList = 32
    RULE_elementList = 33
    RULE_communicationChannel = 34
    RULE_participants = 35
    RULE_roles = 36
    RULE_role = 37
    RULE_individuals = 38
    RULE_individualEntry = 39
    RULE_individual = 40
    RULE_voteValue = 41
    RULE_withProfile = 42
    RULE_withRole = 43
    RULE_agent = 44
    RULE_confidence = 45
    RULE_autonomyLevel = 46
    RULE_explainability = 47
    RULE_profiles = 48
    RULE_profile = 49
    RULE_gender = 50
    RULE_race = 51
    RULE_language = 52
    RULE_policyParticipants = 53
    RULE_partID = 54
    RULE_hasRole = 55
    RULE_conditions = 56
    RULE_deadline = 57
    RULE_minDecisionTime = 58
    RULE_offset = 59
    RULE_deadlineID = 60
    RULE_timeUnit = 61
    RULE_date = 62
    RULE_participantExclusion = 63
    RULE_minParticipant = 64
    RULE_vetoRight = 65
    RULE_appealRight = 66
    RULE_checkCiCd = 67
    RULE_minTime = 68
    RULE_activityBool = 69
    RULE_evaluationMode = 70
    RULE_labelsCondition = 71
    RULE_include = 72
    RULE_parameters = 73
    RULE_votParams = 74
    RULE_ratio = 75
    RULE_default = 76
    RULE_fallback = 77
    RULE_policyReference = 78
    RULE_order = 79
    RULE_orderType = 80
    RULE_orderTypeValue = 81
    RULE_orderMode = 82
    RULE_carryOver = 83
    RULE_booleanValue = 84
    RULE_phases = 85
    RULE_nestedPolicy = 86

    ruleNames =  [ "governance", "policy", "topLevelSinglePolicy", "topLevelComposedPolicy", 
                   "nestedSinglePolicy", "nestedComposedPolicy", "policyType", 
                   "scopes", "scope", "projects", "project", "platform", 
                   "repoID", "activities", "activity", "tasks", "task", 
                   "patchTask", "memberTask", "patchTaskType", "patchTaskContent", 
                   "actionWithLabels", "memberTaskContent", "memberAction", 
                   "memberActionEnum", "status", "statusEnum", "patchAction", 
                   "patchActionEnum", "labels", "decisionType", "booleanDecision", 
                   "stringList", "elementList", "communicationChannel", 
                   "participants", "roles", "role", "individuals", "individualEntry", 
                   "individual", "voteValue", "withProfile", "withRole", 
                   "agent", "confidence", "autonomyLevel", "explainability", 
                   "profiles", "profile", "gender", "race", "language", 
                   "policyParticipants", "partID", "hasRole", "conditions", 
                   "deadline", "minDecisionTime", "offset", "deadlineID", 
                   "timeUnit", "date", "participantExclusion", "minParticipant", 
                   "vetoRight", "appealRight", "checkCiCd", "minTime", "activityBool", 
                   "evaluationMode", "labelsCondition", "include", "parameters", 
                   "votParams", "ratio", "default", "fallback", "policyReference", 
                   "order", "orderType", "orderTypeValue", "orderMode", 
                   "carryOver", "booleanValue", "phases", "nestedPolicy" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    ID=94
    SIGNED_INT=95
    FLOAT=96
    WS=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class GovernanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(govdslParser.EOF, 0)

        def scopes(self):
            return self.getTypedRuleContext(govdslParser.ScopesContext,0)


        def participants(self):
            return self.getTypedRuleContext(govdslParser.ParticipantsContext,0)


        def policy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.PolicyContext)
            else:
                return self.getTypedRuleContext(govdslParser.PolicyContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_governance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGovernance" ):
                listener.enterGovernance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGovernance" ):
                listener.exitGovernance(self)




    def governance(self):

        localctx = govdslParser.GovernanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_governance)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.scopes()
            self.state = 175
            self.participants()
            self.state = 177 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 176
                self.policy()
                self.state = 179 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0)):
                    break

            self.state = 181
            self.match(govdslParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelSinglePolicy(self):
            return self.getTypedRuleContext(govdslParser.TopLevelSinglePolicyContext,0)


        def topLevelComposedPolicy(self):
            return self.getTypedRuleContext(govdslParser.TopLevelComposedPolicyContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicy" ):
                listener.enterPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicy" ):
                listener.exitPolicy(self)




    def policy(self):

        localctx = govdslParser.PolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 6, 7, 8, 9]:
                self.state = 183
                self.topLevelSinglePolicy()
                pass
            elif token in [3]:
                self.state = 184
                self.topLevelComposedPolicy()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelSinglePolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def policyType(self):
            return self.getTypedRuleContext(govdslParser.PolicyTypeContext,0)


        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def scope(self):
            return self.getTypedRuleContext(govdslParser.ScopeContext,0)


        def decisionType(self):
            return self.getTypedRuleContext(govdslParser.DecisionTypeContext,0)


        def policyParticipants(self):
            return self.getTypedRuleContext(govdslParser.PolicyParticipantsContext,0)


        def communicationChannel(self):
            return self.getTypedRuleContext(govdslParser.CommunicationChannelContext,0)


        def conditions(self):
            return self.getTypedRuleContext(govdslParser.ConditionsContext,0)


        def parameters(self):
            return self.getTypedRuleContext(govdslParser.ParametersContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_topLevelSinglePolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelSinglePolicy" ):
                listener.enterTopLevelSinglePolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelSinglePolicy" ):
                listener.exitTopLevelSinglePolicy(self)




    def topLevelSinglePolicy(self):

        localctx = govdslParser.TopLevelSinglePolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelSinglePolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.policyType()
            self.state = 188
            self.match(govdslParser.ID)
            self.state = 189
            self.match(govdslParser.T__0)
            self.state = 190
            self.scope()
            self.state = 191
            self.decisionType()
            self.state = 192
            self.policyParticipants()
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 193
                self.communicationChannel()


            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 196
                self.conditions()


            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 199
                self.parameters()


            self.state = 202
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelComposedPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def scope(self):
            return self.getTypedRuleContext(govdslParser.ScopeContext,0)


        def phases(self):
            return self.getTypedRuleContext(govdslParser.PhasesContext,0)


        def order(self):
            return self.getTypedRuleContext(govdslParser.OrderContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_topLevelComposedPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelComposedPolicy" ):
                listener.enterTopLevelComposedPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelComposedPolicy" ):
                listener.exitTopLevelComposedPolicy(self)




    def topLevelComposedPolicy(self):

        localctx = govdslParser.TopLevelComposedPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelComposedPolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(govdslParser.T__2)
            self.state = 205
            self.match(govdslParser.ID)
            self.state = 206
            self.match(govdslParser.T__0)
            self.state = 207
            self.scope()
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 208
                self.order()


            self.state = 211
            self.phases()
            self.state = 212
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedSinglePolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def policyType(self):
            return self.getTypedRuleContext(govdslParser.PolicyTypeContext,0)


        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def decisionType(self):
            return self.getTypedRuleContext(govdslParser.DecisionTypeContext,0)


        def policyParticipants(self):
            return self.getTypedRuleContext(govdslParser.PolicyParticipantsContext,0)


        def communicationChannel(self):
            return self.getTypedRuleContext(govdslParser.CommunicationChannelContext,0)


        def conditions(self):
            return self.getTypedRuleContext(govdslParser.ConditionsContext,0)


        def parameters(self):
            return self.getTypedRuleContext(govdslParser.ParametersContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_nestedSinglePolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedSinglePolicy" ):
                listener.enterNestedSinglePolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedSinglePolicy" ):
                listener.exitNestedSinglePolicy(self)




    def nestedSinglePolicy(self):

        localctx = govdslParser.NestedSinglePolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_nestedSinglePolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.policyType()
            self.state = 215
            self.match(govdslParser.ID)
            self.state = 216
            self.match(govdslParser.T__0)
            self.state = 217
            self.decisionType()
            self.state = 218
            self.policyParticipants()
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 219
                self.communicationChannel()


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 222
                self.conditions()


            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 225
                self.parameters()


            self.state = 228
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedComposedPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def phases(self):
            return self.getTypedRuleContext(govdslParser.PhasesContext,0)


        def order(self):
            return self.getTypedRuleContext(govdslParser.OrderContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_nestedComposedPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedComposedPolicy" ):
                listener.enterNestedComposedPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedComposedPolicy" ):
                listener.exitNestedComposedPolicy(self)




    def nestedComposedPolicy(self):

        localctx = govdslParser.NestedComposedPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_nestedComposedPolicy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(govdslParser.T__2)
            self.state = 231
            self.match(govdslParser.ID)
            self.state = 232
            self.match(govdslParser.T__0)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 233
                self.order()


            self.state = 236
            self.phases()
            self.state = 237
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_policyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicyType" ):
                listener.enterPolicyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicyType" ):
                listener.exitPolicyType(self)




    def policyType(self):

        localctx = govdslParser.PolicyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_policyType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def projects(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProjectsContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProjectsContext,i)


        def activities(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ActivitiesContext)
            else:
                return self.getTypedRuleContext(govdslParser.ActivitiesContext,i)


        def tasks(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.TasksContext)
            else:
                return self.getTypedRuleContext(govdslParser.TasksContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_scopes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopes" ):
                listener.enterScopes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopes" ):
                listener.exitScopes(self)




    def scopes(self):

        localctx = govdslParser.ScopesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scopes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(govdslParser.T__9)
            self.state = 242
            self.match(govdslParser.T__10)
            self.state = 246 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 246
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 243
                    self.projects()
                    pass
                elif token in [15]:
                    self.state = 244
                    self.activities()
                    pass
                elif token in [18]:
                    self.state = 245
                    self.tasks()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 248 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 303104) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)




    def scope(self):

        localctx = govdslParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_scope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(govdslParser.T__11)
            self.state = 251
            self.match(govdslParser.T__10)
            self.state = 252
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProjectContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProjectContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_projects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjects" ):
                listener.enterProjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjects" ):
                listener.exitProjects(self)




    def projects(self):

        localctx = govdslParser.ProjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_projects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(govdslParser.T__12)
            self.state = 255
            self.match(govdslParser.T__10)
            self.state = 257 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 256
                self.project()
                self.state = 259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def platform(self):
            return self.getTypedRuleContext(govdslParser.PlatformContext,0)


        def repoID(self):
            return self.getTypedRuleContext(govdslParser.RepoIDContext,0)


        def activity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ActivityContext)
            else:
                return self.getTypedRuleContext(govdslParser.ActivityContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject" ):
                listener.enterProject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject" ):
                listener.exitProject(self)




    def project(self):

        localctx = govdslParser.ProjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(govdslParser.ID)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 262
                self.match(govdslParser.T__13)
                self.state = 263
                self.platform()
                self.state = 264
                self.match(govdslParser.T__10)
                self.state = 265
                self.repoID()


            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 269
                self.match(govdslParser.T__0)
                self.state = 270
                self.match(govdslParser.T__14)
                self.state = 271
                self.match(govdslParser.T__10)
                self.state = 273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 272
                    self.activity()
                    self.state = 275 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 277
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlatformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_platform

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform" ):
                listener.enterPlatform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform" ):
                listener.exitPlatform(self)




    def platform(self):

        localctx = govdslParser.PlatformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_platform)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepoIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_repoID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepoID" ):
                listener.enterRepoID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepoID" ):
                listener.exitRepoID(self)




    def repoID(self):

        localctx = govdslParser.RepoIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_repoID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def activity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ActivityContext)
            else:
                return self.getTypedRuleContext(govdslParser.ActivityContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_activities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivities" ):
                listener.enterActivities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivities" ):
                listener.exitActivities(self)




    def activities(self):

        localctx = govdslParser.ActivitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_activities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(govdslParser.T__14)
            self.state = 286
            self.match(govdslParser.T__10)
            self.state = 288 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 287
                self.activity()
                self.state = 290 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def task(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.TaskContext)
            else:
                return self.getTypedRuleContext(govdslParser.TaskContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_activity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivity" ):
                listener.enterActivity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivity" ):
                listener.exitActivity(self)




    def activity(self):

        localctx = govdslParser.ActivityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_activity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(govdslParser.ID)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 293
                self.match(govdslParser.T__0)
                self.state = 294
                self.match(govdslParser.T__17)
                self.state = 295
                self.match(govdslParser.T__10)
                self.state = 297 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 296
                    self.task()
                    self.state = 299 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==94):
                        break

                self.state = 301
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TasksContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def task(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.TaskContext)
            else:
                return self.getTypedRuleContext(govdslParser.TaskContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_tasks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTasks" ):
                listener.enterTasks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTasks" ):
                listener.exitTasks(self)




    def tasks(self):

        localctx = govdslParser.TasksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_tasks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(govdslParser.T__17)
            self.state = 306
            self.match(govdslParser.T__10)
            self.state = 308 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 307
                self.task()
                self.state = 310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==94):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def patchTask(self):
            return self.getTypedRuleContext(govdslParser.PatchTaskContext,0)


        def memberTask(self):
            return self.getTypedRuleContext(govdslParser.MemberTaskContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask" ):
                listener.enterTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask" ):
                listener.exitTask(self)




    def task(self):

        localctx = govdslParser.TaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_task)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(govdslParser.ID)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 313
                self.match(govdslParser.T__10)


            self.state = 318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 21, 22]:
                self.state = 316
                self.patchTask()
                pass
            elif token in [19]:
                self.state = 317
                self.memberTask()
                pass
            elif token in [2, 13, 15, 18, 41, 94]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patchTaskType(self):
            return self.getTypedRuleContext(govdslParser.PatchTaskTypeContext,0)


        def patchTaskContent(self):
            return self.getTypedRuleContext(govdslParser.PatchTaskContentContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_patchTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchTask" ):
                listener.enterPatchTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchTask" ):
                listener.exitPatchTask(self)




    def patchTask(self):

        localctx = govdslParser.PatchTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_patchTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.patchTaskType()
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 321
                self.match(govdslParser.T__0)
                self.state = 322
                self.patchTaskContent()
                self.state = 323
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberTaskContent(self):
            return self.getTypedRuleContext(govdslParser.MemberTaskContentContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_memberTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberTask" ):
                listener.enterMemberTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberTask" ):
                listener.exitMemberTask(self)




    def memberTask(self):

        localctx = govdslParser.MemberTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_memberTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(govdslParser.T__18)
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 328
                self.match(govdslParser.T__0)
                self.state = 329
                self.memberTaskContent()
                self.state = 330
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchTaskTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_patchTaskType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchTaskType" ):
                listener.enterPatchTaskType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchTaskType" ):
                listener.exitPatchTaskType(self)




    def patchTaskType(self):

        localctx = govdslParser.PatchTaskTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_patchTaskType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7340032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchTaskContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def status(self):
            return self.getTypedRuleContext(govdslParser.StatusContext,0)


        def patchAction(self):
            return self.getTypedRuleContext(govdslParser.PatchActionContext,0)


        def actionWithLabels(self):
            return self.getTypedRuleContext(govdslParser.ActionWithLabelsContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_patchTaskContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchTaskContent" ):
                listener.enterPatchTaskContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchTaskContent" ):
                listener.exitPatchTaskContent(self)




    def patchTaskContent(self):

        localctx = govdslParser.PatchTaskContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_patchTaskContent)
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.status()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.patchAction()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.actionWithLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionWithLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patchAction(self):
            return self.getTypedRuleContext(govdslParser.PatchActionContext,0)


        def labels(self):
            return self.getTypedRuleContext(govdslParser.LabelsContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_actionWithLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionWithLabels" ):
                listener.enterActionWithLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionWithLabels" ):
                listener.exitActionWithLabels(self)




    def actionWithLabels(self):

        localctx = govdslParser.ActionWithLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_actionWithLabels)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.patchAction()
            self.state = 342
            self.labels()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberTaskContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberAction(self):
            return self.getTypedRuleContext(govdslParser.MemberActionContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_memberTaskContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberTaskContent" ):
                listener.enterMemberTaskContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberTaskContent" ):
                listener.exitMemberTaskContent(self)




    def memberTaskContent(self):

        localctx = govdslParser.MemberTaskContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_memberTaskContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.memberAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberActionEnum(self):
            return self.getTypedRuleContext(govdslParser.MemberActionEnumContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_memberAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAction" ):
                listener.enterMemberAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAction" ):
                listener.exitMemberAction(self)




    def memberAction(self):

        localctx = govdslParser.MemberActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_memberAction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(govdslParser.T__22)
            self.state = 347
            self.match(govdslParser.T__10)
            self.state = 348
            self.memberActionEnum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberActionEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_memberActionEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberActionEnum" ):
                listener.enterMemberActionEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberActionEnum" ):
                listener.exitMemberActionEnum(self)




    def memberActionEnum(self):

        localctx = govdslParser.MemberActionEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_memberActionEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            _la = self._input.LA(1)
            if not(_la==24 or _la==25):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statusEnum(self):
            return self.getTypedRuleContext(govdslParser.StatusEnumContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_status

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatus" ):
                listener.enterStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatus" ):
                listener.exitStatus(self)




    def status(self):

        localctx = govdslParser.StatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_status)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(govdslParser.T__25)
            self.state = 353
            self.match(govdslParser.T__10)
            self.state = 354
            self.statusEnum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatusEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_statusEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatusEnum" ):
                listener.enterStatusEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatusEnum" ):
                listener.exitStatusEnum(self)




    def statusEnum(self):

        localctx = govdslParser.StatusEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_statusEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 939524096) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patchActionEnum(self):
            return self.getTypedRuleContext(govdslParser.PatchActionEnumContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_patchAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchAction" ):
                listener.enterPatchAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchAction" ):
                listener.exitPatchAction(self)




    def patchAction(self):

        localctx = govdslParser.PatchActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_patchAction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(govdslParser.T__22)
            self.state = 359
            self.match(govdslParser.T__10)
            self.state = 360
            self.patchActionEnum()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatchActionEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_patchActionEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatchActionEnum" ):
                listener.enterPatchActionEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatchActionEnum" ):
                listener.exitPatchActionEnum(self)




    def patchActionEnum(self):

        localctx = govdslParser.PatchActionEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_patchActionEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabels" ):
                listener.enterLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabels" ):
                listener.exitLabels(self)




    def labels(self):

        localctx = govdslParser.LabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_labels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(govdslParser.T__32)
            self.state = 365
            self.match(govdslParser.T__10)
            self.state = 366
            self.match(govdslParser.ID)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 367
                self.match(govdslParser.T__33)
                self.state = 368
                self.match(govdslParser.ID)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecisionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanDecision(self):
            return self.getTypedRuleContext(govdslParser.BooleanDecisionContext,0)


        def stringList(self):
            return self.getTypedRuleContext(govdslParser.StringListContext,0)


        def elementList(self):
            return self.getTypedRuleContext(govdslParser.ElementListContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_decisionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecisionType" ):
                listener.enterDecisionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecisionType" ):
                listener.exitDecisionType(self)




    def decisionType(self):

        localctx = govdslParser.DecisionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_decisionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(govdslParser.T__34)
            self.state = 375
            self.match(govdslParser.T__35)
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 376
                self.booleanDecision()
                pass
            elif token in [38]:
                self.state = 377
                self.stringList()
                pass
            elif token in [39]:
                self.state = 378
                self.elementList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanDecisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_booleanDecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDecision" ):
                listener.enterBooleanDecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDecision" ):
                listener.exitBooleanDecision(self)




    def booleanDecision(self):

        localctx = govdslParser.BooleanDecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_booleanDecision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(govdslParser.T__36)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_stringList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringList" ):
                listener.enterStringList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringList" ):
                listener.exitStringList(self)




    def stringList(self):

        localctx = govdslParser.StringListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_stringList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(govdslParser.T__37)
            self.state = 384
            self.match(govdslParser.T__10)
            self.state = 385
            self.match(govdslParser.ID)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 386
                self.match(govdslParser.T__33)
                self.state = 387
                self.match(govdslParser.ID)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)




    def elementList(self):

        localctx = govdslParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(govdslParser.T__38)
            self.state = 394
            self.match(govdslParser.T__10)
            self.state = 395
            self.match(govdslParser.ID)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 396
                self.match(govdslParser.T__33)
                self.state = 397
                self.match(govdslParser.ID)
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommunicationChannelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_communicationChannel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommunicationChannel" ):
                listener.enterCommunicationChannel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommunicationChannel" ):
                listener.exitCommunicationChannel(self)




    def communicationChannel(self):

        localctx = govdslParser.CommunicationChannelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_communicationChannel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(govdslParser.T__39)
            self.state = 404
            self.match(govdslParser.T__10)
            self.state = 405
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParticipantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roles(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.RolesContext)
            else:
                return self.getTypedRuleContext(govdslParser.RolesContext,i)


        def individuals(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.IndividualsContext)
            else:
                return self.getTypedRuleContext(govdslParser.IndividualsContext,i)


        def profiles(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProfilesContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProfilesContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_participants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParticipants" ):
                listener.enterParticipants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParticipants" ):
                listener.exitParticipants(self)




    def participants(self):

        localctx = govdslParser.ParticipantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_participants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(govdslParser.T__40)
            self.state = 408
            self.match(govdslParser.T__10)
            self.state = 412 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 412
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42]:
                    self.state = 409
                    self.roles()
                    pass
                elif token in [43]:
                    self.state = 410
                    self.individuals()
                    pass
                elif token in [51]:
                    self.state = 411
                    self.profiles()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 414 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2264993953218560) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def role(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.RoleContext)
            else:
                return self.getTypedRuleContext(govdslParser.RoleContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)




    def roles(self):

        localctx = govdslParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(govdslParser.T__41)
            self.state = 417
            self.match(govdslParser.T__10)
            self.state = 418
            self.role()
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 419
                self.match(govdslParser.T__33)
                self.state = 420
                self.role()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def voteValue(self):
            return self.getTypedRuleContext(govdslParser.VoteValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole" ):
                listener.enterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole" ):
                listener.exitRole(self)




    def role(self):

        localctx = govdslParser.RoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(govdslParser.ID)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 427
                self.match(govdslParser.T__0)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 428
                    self.voteValue()


                self.state = 431
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndividualsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def individualEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.IndividualEntryContext)
            else:
                return self.getTypedRuleContext(govdslParser.IndividualEntryContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_individuals

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividuals" ):
                listener.enterIndividuals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividuals" ):
                listener.exitIndividuals(self)




    def individuals(self):

        localctx = govdslParser.IndividualsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_individuals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(govdslParser.T__42)
            self.state = 435
            self.match(govdslParser.T__10)
            self.state = 436
            self.individualEntry()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 1152921504606855169) != 0):
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 437
                    self.match(govdslParser.T__33)


                self.state = 440
                self.individualEntry()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndividualEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def individual(self):
            return self.getTypedRuleContext(govdslParser.IndividualContext,0)


        def agent(self):
            return self.getTypedRuleContext(govdslParser.AgentContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_individualEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividualEntry" ):
                listener.enterIndividualEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividualEntry" ):
                listener.exitIndividualEntry(self)




    def individualEntry(self):

        localctx = govdslParser.IndividualEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_individualEntry)
        try:
            self.state = 448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.individual()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.agent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndividualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def voteValue(self):
            return self.getTypedRuleContext(govdslParser.VoteValueContext,0)


        def withProfile(self):
            return self.getTypedRuleContext(govdslParser.WithProfileContext,0)


        def withRole(self):
            return self.getTypedRuleContext(govdslParser.WithRoleContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_individual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndividual" ):
                listener.enterIndividual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndividual" ):
                listener.exitIndividual(self)




    def individual(self):

        localctx = govdslParser.IndividualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_individual)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(govdslParser.ID)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 451
                self.match(govdslParser.T__0)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 452
                    self.voteValue()


                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 455
                    self.match(govdslParser.T__33)


                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 458
                    self.withProfile()


                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 461
                    self.match(govdslParser.T__33)


                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 464
                    self.withRole()


                self.state = 467
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VoteValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_voteValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoteValue" ):
                listener.enterVoteValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoteValue" ):
                listener.exitVoteValue(self)




    def voteValue(self):

        localctx = govdslParser.VoteValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_voteValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(govdslParser.T__43)
            self.state = 471
            self.match(govdslParser.T__10)
            self.state = 472
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithProfileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_withProfile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithProfile" ):
                listener.enterWithProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithProfile" ):
                listener.exitWithProfile(self)




    def withProfile(self):

        localctx = govdslParser.WithProfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_withProfile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(govdslParser.T__44)
            self.state = 475
            self.match(govdslParser.T__10)
            self.state = 476
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_withRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithRole" ):
                listener.enterWithRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithRole" ):
                listener.exitWithRole(self)




    def withRole(self):

        localctx = govdslParser.WithRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_withRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(govdslParser.T__45)
            self.state = 479
            self.match(govdslParser.T__10)
            self.state = 480
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AgentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def voteValue(self):
            return self.getTypedRuleContext(govdslParser.VoteValueContext,0)


        def confidence(self):
            return self.getTypedRuleContext(govdslParser.ConfidenceContext,0)


        def autonomyLevel(self):
            return self.getTypedRuleContext(govdslParser.AutonomyLevelContext,0)


        def explainability(self):
            return self.getTypedRuleContext(govdslParser.ExplainabilityContext,0)


        def withRole(self):
            return self.getTypedRuleContext(govdslParser.WithRoleContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_agent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent" ):
                listener.enterAgent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent" ):
                listener.exitAgent(self)




    def agent(self):

        localctx = govdslParser.AgentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_agent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(govdslParser.T__46)
            self.state = 483
            self.match(govdslParser.ID)
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 484
                self.match(govdslParser.T__0)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==44:
                    self.state = 485
                    self.voteValue()


                self.state = 489
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 488
                    self.match(govdslParser.T__33)


                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 491
                    self.confidence()


                self.state = 495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 494
                    self.match(govdslParser.T__33)


                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 497
                    self.autonomyLevel()


                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 500
                    self.match(govdslParser.T__33)


                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 503
                    self.explainability()


                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 506
                    self.match(govdslParser.T__33)


                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 509
                    self.withRole()


                self.state = 512
                self.match(govdslParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfidenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_confidence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfidence" ):
                listener.enterConfidence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfidence" ):
                listener.exitConfidence(self)




    def confidence(self):

        localctx = govdslParser.ConfidenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_confidence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(govdslParser.T__47)
            self.state = 516
            self.match(govdslParser.T__10)
            self.state = 517
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AutonomyLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_autonomyLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutonomyLevel" ):
                listener.enterAutonomyLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutonomyLevel" ):
                listener.exitAutonomyLevel(self)




    def autonomyLevel(self):

        localctx = govdslParser.AutonomyLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_autonomyLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(govdslParser.T__48)
            self.state = 520
            self.match(govdslParser.T__10)
            self.state = 521
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_explainability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainability" ):
                listener.enterExplainability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainability" ):
                listener.exitExplainability(self)




    def explainability(self):

        localctx = govdslParser.ExplainabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_explainability)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(govdslParser.T__49)
            self.state = 524
            self.match(govdslParser.T__10)
            self.state = 525
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def profile(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.ProfileContext)
            else:
                return self.getTypedRuleContext(govdslParser.ProfileContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_profiles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfiles" ):
                listener.enterProfiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfiles" ):
                listener.exitProfiles(self)




    def profiles(self):

        localctx = govdslParser.ProfilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_profiles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(govdslParser.T__50)
            self.state = 528
            self.match(govdslParser.T__10)
            self.state = 529
            self.profile()
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34 or _la==94:
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 530
                    self.match(govdslParser.T__33)


                self.state = 533
                self.profile()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProfileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def gender(self):
            return self.getTypedRuleContext(govdslParser.GenderContext,0)


        def race(self):
            return self.getTypedRuleContext(govdslParser.RaceContext,0)


        def language(self):
            return self.getTypedRuleContext(govdslParser.LanguageContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_profile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile" ):
                listener.enterProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile" ):
                listener.exitProfile(self)




    def profile(self):

        localctx = govdslParser.ProfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_profile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(govdslParser.ID)
            self.state = 540
            self.match(govdslParser.T__0)
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 541
                self.gender()
                self.state = 543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 542
                    self.match(govdslParser.T__33)


                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 545
                    self.race()


                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 548
                    self.match(govdslParser.T__33)


                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 551
                    self.language()


                pass
            elif token in [53]:
                self.state = 554
                self.race()
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 555
                    self.match(govdslParser.T__33)


                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 558
                    self.gender()


                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 561
                    self.match(govdslParser.T__33)


                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 564
                    self.language()


                pass
            elif token in [54]:
                self.state = 567
                self.language()
                self.state = 569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 568
                    self.match(govdslParser.T__33)


                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 571
                    self.gender()


                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 574
                    self.match(govdslParser.T__33)


                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 577
                    self.race()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 582
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_gender

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGender" ):
                listener.enterGender(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGender" ):
                listener.exitGender(self)




    def gender(self):

        localctx = govdslParser.GenderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_gender)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(govdslParser.T__51)
            self.state = 585
            self.match(govdslParser.T__10)
            self.state = 586
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_race

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRace" ):
                listener.enterRace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRace" ):
                listener.exitRace(self)




    def race(self):

        localctx = govdslParser.RaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_race)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(govdslParser.T__52)
            self.state = 589
            self.match(govdslParser.T__10)
            self.state = 590
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_language

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage" ):
                listener.enterLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage" ):
                listener.exitLanguage(self)




    def language(self):

        localctx = govdslParser.LanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_language)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(govdslParser.T__53)
            self.state = 593
            self.match(govdslParser.T__10)
            self.state = 594
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyParticipantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.PartIDContext)
            else:
                return self.getTypedRuleContext(govdslParser.PartIDContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_policyParticipants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicyParticipants" ):
                listener.enterPolicyParticipants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicyParticipants" ):
                listener.exitPolicyParticipants(self)




    def policyParticipants(self):

        localctx = govdslParser.PolicyParticipantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_policyParticipants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(govdslParser.T__54)
            self.state = 597
            self.match(govdslParser.T__10)
            self.state = 598
            self.partID()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 599
                self.match(govdslParser.T__33)
                self.state = 600
                self.partID()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def hasRole(self):
            return self.getTypedRuleContext(govdslParser.HasRoleContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_partID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartID" ):
                listener.enterPartID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartID" ):
                listener.exitPartID(self)




    def partID(self):

        localctx = govdslParser.PartIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_partID)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(govdslParser.ID)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 607
                self.hasRole()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HasRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_hasRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHasRole" ):
                listener.enterHasRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHasRole" ):
                listener.exitHasRole(self)




    def hasRole(self):

        localctx = govdslParser.HasRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_hasRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(govdslParser.T__35)
            self.state = 611
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def deadline(self):
            return self.getTypedRuleContext(govdslParser.DeadlineContext,0)


        def minDecisionTime(self):
            return self.getTypedRuleContext(govdslParser.MinDecisionTimeContext,0)


        def participantExclusion(self):
            return self.getTypedRuleContext(govdslParser.ParticipantExclusionContext,0)


        def minParticipant(self):
            return self.getTypedRuleContext(govdslParser.MinParticipantContext,0)


        def vetoRight(self):
            return self.getTypedRuleContext(govdslParser.VetoRightContext,0)


        def appealRight(self):
            return self.getTypedRuleContext(govdslParser.AppealRightContext,0)


        def checkCiCd(self):
            return self.getTypedRuleContext(govdslParser.CheckCiCdContext,0)


        def minTime(self):
            return self.getTypedRuleContext(govdslParser.MinTimeContext,0)


        def labelsCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.LabelsConditionContext)
            else:
                return self.getTypedRuleContext(govdslParser.LabelsConditionContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_conditions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditions" ):
                listener.enterConditions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditions" ):
                listener.exitConditions(self)




    def conditions(self):

        localctx = govdslParser.ConditionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_conditions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(govdslParser.T__55)
            self.state = 614
            self.match(govdslParser.T__10)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 615
                self.deadline()


            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 618
                self.minDecisionTime()


            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 621
                self.participantExclusion()


            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 624
                self.minParticipant()


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 627
                self.vetoRight()


            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 630
                self.appealRight()


            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 633
                self.checkCiCd()


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 636
                self.minTime()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 639
                self.labelsCondition()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeadlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def offset(self):
            return self.getTypedRuleContext(govdslParser.OffsetContext,0)


        def date(self):
            return self.getTypedRuleContext(govdslParser.DateContext,0)


        def deadlineID(self):
            return self.getTypedRuleContext(govdslParser.DeadlineIDContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_deadline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeadline" ):
                listener.enterDeadline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeadline" ):
                listener.exitDeadline(self)




    def deadline(self):

        localctx = govdslParser.DeadlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_deadline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(govdslParser.T__56)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 646
                self.deadlineID()


            self.state = 649
            self.match(govdslParser.T__10)
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 650
                self.offset()
                pass

            elif la_ == 2:
                self.state = 651
                self.date()
                pass

            elif la_ == 3:
                self.state = 652
                self.offset()
                self.state = 653
                self.match(govdslParser.T__33)
                self.state = 654
                self.date()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinDecisionTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def offset(self):
            return self.getTypedRuleContext(govdslParser.OffsetContext,0)


        def date(self):
            return self.getTypedRuleContext(govdslParser.DateContext,0)


        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_minDecisionTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinDecisionTime" ):
                listener.enterMinDecisionTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinDecisionTime" ):
                listener.exitMinDecisionTime(self)




    def minDecisionTime(self):

        localctx = govdslParser.MinDecisionTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_minDecisionTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(govdslParser.T__57)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 659
                self.match(govdslParser.ID)


            self.state = 662
            self.match(govdslParser.T__10)
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 663
                self.offset()
                pass

            elif la_ == 2:
                self.state = 664
                self.date()
                pass

            elif la_ == 3:
                self.state = 665
                self.offset()
                self.state = 666
                self.match(govdslParser.T__33)
                self.state = 667
                self.date()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_INT(self):
            return self.getToken(govdslParser.SIGNED_INT, 0)

        def timeUnit(self):
            return self.getTypedRuleContext(govdslParser.TimeUnitContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = govdslParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(govdslParser.SIGNED_INT)
            self.state = 672
            self.timeUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeadlineIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_deadlineID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeadlineID" ):
                listener.enterDeadlineID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeadlineID" ):
                listener.exitDeadlineID(self)




    def deadlineID(self):

        localctx = govdslParser.DeadlineIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_deadlineID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_timeUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeUnit" ):
                listener.enterTimeUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeUnit" ):
                listener.exitTimeUnit(self)




    def timeUnit(self):

        localctx = govdslParser.TimeUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_timeUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911284551352320) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_INT(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.SIGNED_INT)
            else:
                return self.getToken(govdslParser.SIGNED_INT, i)

        def getRuleIndex(self):
            return govdslParser.RULE_date

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate" ):
                listener.enterDate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate" ):
                listener.exitDate(self)




    def date(self):

        localctx = govdslParser.DateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(govdslParser.SIGNED_INT)
            self.state = 679
            self.match(govdslParser.T__62)
            self.state = 680
            self.match(govdslParser.SIGNED_INT)
            self.state = 681
            self.match(govdslParser.T__62)
            self.state = 682
            self.match(govdslParser.SIGNED_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParticipantExclusionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_participantExclusion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParticipantExclusion" ):
                listener.enterParticipantExclusion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParticipantExclusion" ):
                listener.exitParticipantExclusion(self)




    def participantExclusion(self):

        localctx = govdslParser.ParticipantExclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_participantExclusion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(govdslParser.T__63)
            self.state = 685
            self.match(govdslParser.T__10)
            self.state = 686
            self.match(govdslParser.ID)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 687
                self.match(govdslParser.T__33)
                self.state = 688
                self.match(govdslParser.ID)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinParticipantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_INT(self):
            return self.getToken(govdslParser.SIGNED_INT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_minParticipant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinParticipant" ):
                listener.enterMinParticipant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinParticipant" ):
                listener.exitMinParticipant(self)




    def minParticipant(self):

        localctx = govdslParser.MinParticipantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_minParticipant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(govdslParser.T__64)
            self.state = 695
            self.match(govdslParser.T__10)
            self.state = 696
            self.match(govdslParser.SIGNED_INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VetoRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def getRuleIndex(self):
            return govdslParser.RULE_vetoRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVetoRight" ):
                listener.enterVetoRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVetoRight" ):
                listener.exitVetoRight(self)




    def vetoRight(self):

        localctx = govdslParser.VetoRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_vetoRight)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(govdslParser.T__65)
            self.state = 699
            self.match(govdslParser.T__10)
            self.state = 700
            self.match(govdslParser.ID)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 701
                self.match(govdslParser.T__33)
                self.state = 702
                self.match(govdslParser.ID)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppealRightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def nestedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedPolicyContext,0)


        def policyReference(self):
            return self.getTypedRuleContext(govdslParser.PolicyReferenceContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_appealRight

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppealRight" ):
                listener.enterAppealRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppealRight" ):
                listener.exitAppealRight(self)




    def appealRight(self):

        localctx = govdslParser.AppealRightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_appealRight)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(govdslParser.T__66)
            self.state = 709
            self.match(govdslParser.T__10)
            self.state = 710
            self.match(govdslParser.T__0)
            self.state = 711
            self.match(govdslParser.T__67)
            self.state = 712
            self.match(govdslParser.T__10)
            self.state = 713
            self.match(govdslParser.ID)
            self.state = 718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 714
                    self.match(govdslParser.T__33)
                    self.state = 715
                    self.match(govdslParser.ID) 
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 721
                self.match(govdslParser.T__33)


            self.state = 724
            self.match(govdslParser.T__68)
            self.state = 725
            self.match(govdslParser.T__10)
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 9]:
                self.state = 726
                self.nestedPolicy()
                pass
            elif token in [94]:
                self.state = 727
                self.policyReference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 730
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckCiCdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValue(self):
            return self.getTypedRuleContext(govdslParser.BooleanValueContext,0)


        def evaluationMode(self):
            return self.getTypedRuleContext(govdslParser.EvaluationModeContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_checkCiCd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckCiCd" ):
                listener.enterCheckCiCd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckCiCd" ):
                listener.exitCheckCiCd(self)




    def checkCiCd(self):

        localctx = govdslParser.CheckCiCdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_checkCiCd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(govdslParser.T__69)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 733
                self.evaluationMode()


            self.state = 736
            self.match(govdslParser.T__10)
            self.state = 737
            self.booleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def activityBool(self):
            return self.getTypedRuleContext(govdslParser.ActivityBoolContext,0)


        def offset(self):
            return self.getTypedRuleContext(govdslParser.OffsetContext,0)


        def evaluationMode(self):
            return self.getTypedRuleContext(govdslParser.EvaluationModeContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_minTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinTime" ):
                listener.enterMinTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinTime" ):
                listener.exitMinTime(self)




    def minTime(self):

        localctx = govdslParser.MinTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_minTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(govdslParser.T__70)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 740
                self.evaluationMode()


            self.state = 743
            self.match(govdslParser.T__71)
            self.state = 744
            self.activityBool()
            self.state = 745
            self.match(govdslParser.T__10)
            self.state = 746
            self.offset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActivityBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_activityBool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActivityBool" ):
                listener.enterActivityBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActivityBool" ):
                listener.exitActivityBool(self)




    def activityBool(self):

        localctx = govdslParser.ActivityBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_activityBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            _la = self._input.LA(1)
            if not(_la==73 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluationModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_evaluationMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluationMode" ):
                listener.enterEvaluationMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluationMode" ):
                listener.exitEvaluationMode(self)




    def evaluationMode(self):

        localctx = govdslParser.EvaluationModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_evaluationMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelsConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(govdslParser.ID)
            else:
                return self.getToken(govdslParser.ID, i)

        def evaluationMode(self):
            return self.getTypedRuleContext(govdslParser.EvaluationModeContext,0)


        def include(self):
            return self.getTypedRuleContext(govdslParser.IncludeContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_labelsCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelsCondition" ):
                listener.enterLabelsCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelsCondition" ):
                listener.exitLabelsCondition(self)




    def labelsCondition(self):

        localctx = govdslParser.LabelsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_labelsCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(govdslParser.T__77)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 7) != 0):
                self.state = 753
                self.evaluationMode()


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==80:
                self.state = 756
                self.include()


            self.state = 759
            self.match(govdslParser.T__10)
            self.state = 760
            self.match(govdslParser.ID)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 761
                self.match(govdslParser.T__33)
                self.state = 762
                self.match(govdslParser.ID)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)




    def include(self):

        localctx = govdslParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_include)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            _la = self._input.LA(1)
            if not(_la==79 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def votParams(self):
            return self.getTypedRuleContext(govdslParser.VotParamsContext,0)


        def default(self):
            return self.getTypedRuleContext(govdslParser.DefaultContext,0)


        def fallback(self):
            return self.getTypedRuleContext(govdslParser.FallbackContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = govdslParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(govdslParser.T__80)
            self.state = 771
            self.match(govdslParser.T__10)
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 772
                self.votParams()
                pass
            elif token in [83]:
                self.state = 773
                self.default()
                pass
            elif token in [84]:
                self.state = 774
                self.fallback()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VotParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ratio(self):
            return self.getTypedRuleContext(govdslParser.RatioContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_votParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVotParams" ):
                listener.enterVotParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVotParams" ):
                listener.exitVotParams(self)




    def votParams(self):

        localctx = govdslParser.VotParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_votParams)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.ratio()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(govdslParser.FLOAT, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_ratio

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatio" ):
                listener.enterRatio(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatio" ):
                listener.exitRatio(self)




    def ratio(self):

        localctx = govdslParser.RatioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ratio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(govdslParser.T__81)
            self.state = 780
            self.match(govdslParser.T__10)
            self.state = 781
            self.match(govdslParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedPolicyContext,0)


        def policyReference(self):
            return self.getTypedRuleContext(govdslParser.PolicyReferenceContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)




    def default(self):

        localctx = govdslParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(govdslParser.T__82)
            self.state = 784
            self.match(govdslParser.T__10)
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 9]:
                self.state = 785
                self.nestedPolicy()
                pass
            elif token in [94]:
                self.state = 786
                self.policyReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallbackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedPolicyContext,0)


        def policyReference(self):
            return self.getTypedRuleContext(govdslParser.PolicyReferenceContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_fallback

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallback" ):
                listener.enterFallback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallback" ):
                listener.exitFallback(self)




    def fallback(self):

        localctx = govdslParser.FallbackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_fallback)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(govdslParser.T__83)
            self.state = 790
            self.match(govdslParser.T__10)
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 5, 6, 7, 8, 9]:
                self.state = 791
                self.nestedPolicy()
                pass
            elif token in [94]:
                self.state = 792
                self.policyReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolicyReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(govdslParser.ID, 0)

        def getRuleIndex(self):
            return govdslParser.RULE_policyReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolicyReference" ):
                listener.enterPolicyReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolicyReference" ):
                listener.exitPolicyReference(self)




    def policyReference(self):

        localctx = govdslParser.PolicyReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_policyReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(govdslParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderType(self):
            return self.getTypedRuleContext(govdslParser.OrderTypeContext,0)


        def orderMode(self):
            return self.getTypedRuleContext(govdslParser.OrderModeContext,0)


        def carryOver(self):
            return self.getTypedRuleContext(govdslParser.CarryOverContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder" ):
                listener.enterOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder" ):
                listener.exitOrder(self)




    def order(self):

        localctx = govdslParser.OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(govdslParser.T__84)
            self.state = 798
            self.match(govdslParser.T__10)

            self.state = 799
            self.orderType()
            self.state = 800
            self.orderMode()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 801
                self.carryOver()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderTypeValue(self):
            return self.getTypedRuleContext(govdslParser.OrderTypeValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_orderType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderType" ):
                listener.enterOrderType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderType" ):
                listener.exitOrderType(self)




    def orderType(self):

        localctx = govdslParser.OrderTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_orderType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(govdslParser.T__85)
            self.state = 805
            self.match(govdslParser.T__10)
            self.state = 806
            self.orderTypeValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderTypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_orderTypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderTypeValue" ):
                listener.enterOrderTypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderTypeValue" ):
                listener.exitOrderTypeValue(self)




    def orderTypeValue(self):

        localctx = govdslParser.OrderTypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_orderTypeValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValue(self):
            return self.getTypedRuleContext(govdslParser.BooleanValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_orderMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderMode" ):
                listener.enterOrderMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderMode" ):
                listener.exitOrderMode(self)




    def orderMode(self):

        localctx = govdslParser.OrderModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_orderMode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(govdslParser.T__88)
            self.state = 811
            self.match(govdslParser.T__10)
            self.state = 812
            self.booleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CarryOverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanValue(self):
            return self.getTypedRuleContext(govdslParser.BooleanValueContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_carryOver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarryOver" ):
                listener.enterCarryOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarryOver" ):
                listener.exitCarryOver(self)




    def carryOver(self):

        localctx = govdslParser.CarryOverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_carryOver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(govdslParser.T__89)
            self.state = 815
            self.match(govdslParser.T__10)
            self.state = 816
            self.booleanValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return govdslParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = govdslParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            _la = self._input.LA(1)
            if not(_la==91 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedPolicy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(govdslParser.NestedPolicyContext)
            else:
                return self.getTypedRuleContext(govdslParser.NestedPolicyContext,i)


        def getRuleIndex(self):
            return govdslParser.RULE_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhases" ):
                listener.enterPhases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhases" ):
                listener.exitPhases(self)




    def phases(self):

        localctx = govdslParser.PhasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_phases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(govdslParser.T__92)
            self.state = 821
            self.match(govdslParser.T__0)
            self.state = 823 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 822
                self.nestedPolicy()
                self.state = 825 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0)):
                    break

            self.state = 827
            self.match(govdslParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedPolicyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedSinglePolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedSinglePolicyContext,0)


        def nestedComposedPolicy(self):
            return self.getTypedRuleContext(govdslParser.NestedComposedPolicyContext,0)


        def getRuleIndex(self):
            return govdslParser.RULE_nestedPolicy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedPolicy" ):
                listener.enterNestedPolicy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedPolicy" ):
                listener.exitNestedPolicy(self)




    def nestedPolicy(self):

        localctx = govdslParser.NestedPolicyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_nestedPolicy)
        try:
            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 6, 7, 8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.nestedSinglePolicy()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.nestedComposedPolicy()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





